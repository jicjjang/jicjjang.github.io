{"version":3,"sources":["webpack:///./src/utils/speech.ts","webpack:///./src/pages/index.tsx","webpack:///./src/components/PostHeader.tsx"],"names":["Speech","isSupportedSpeech","SpeechSynthesisUtterance","speechSynthesis","console","error","window","onbeforeunload","stopSpeech","sendMessage","text","voiceIndex","this","speaking","cancel","message","rate","voices","getVoices","voice","speak","sendContentsMessage","postArticleElement","document","querySelector","innerText","StyledPExcerpt","styled","p","props","scale","fontSize","lineHeight","CURRENT_YEAR","Date","getFullYear","toString","path","data","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","filter","currentValue","node","frontmatter","date","endsWith","reduce","mergedValue","push","slug","fields","excerpt","pathname","length","map","index","tags","key","rhythm","undefined","StyledHeader","header","StyledH1Link","Link","StyledSpeechSpan","span","StyledTime","time","PostHeader","isPost","to","onClick","speech","className","dateTime"],"mappings":"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","file":"component---src-pages-index-tsx-b0a7cdcc72541b66bef9.js","sourcesContent":["class Speech {\n  constructor() {}\n\n  private isSupportedSpeech() {\n    if (typeof SpeechSynthesisUtterance === 'undefined' || typeof speechSynthesis === 'undefined') {\n      console.error('This browser does not support speech API');\n      return false;\n    }\n\n    window.onbeforeunload = () => this.stopSpeech();\n\n    return true;\n  }\n\n  public sendMessage(text, voiceIndex = 0) {\n    if (this.isSupportedSpeech()) {\n      if (window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel();\n      }\n\n      const message = new SpeechSynthesisUtterance(text);\n      message.rate = 0.3;\n      const voices = speechSynthesis.getVoices();\n\n      message.voice = voices[voiceIndex];\n      speechSynthesis.speak(message);\n    }\n  }\n\n  public sendContentsMessage() {\n    const postArticleElement = document.querySelector('.post_article') as HTMLElement;\n    if (postArticleElement?.innerText) {\n      this.sendMessage(postArticleElement?.innerText);\n    }\n  }\n\n  public stopSpeech() {\n    if (this.isSupportedSpeech() && window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }\n}\n\nexport default new Speech();\n","import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\n\nimport DefaultLayout from '~/components/layout/Default';\nimport { Query, MarkdownRemarkFields, MarkdownRemarkFrontmatter } from '~/gatsby-graphql-types';\nimport { rhythm } from '~/configs/typography';\nimport { scale } from '~/configs/typography';\nimport PostHeader from '~/components/PostHeader';\nimport PostTags from '~/components/PostTags';\nimport { StyledCommonArticle, StyledCommonDivPost, StyledCommonDivEmpty } from '~/components/common';\n\nconst StyledPExcerpt = styled.p<{ scale: BaseLine }>`\n  font-weight: 400;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n  color: #353535;\n`;\n\nconst CURRENT_YEAR = new Date().getFullYear().toString();\n\ntype IPostType = MarkdownRemarkFields & MarkdownRemarkFrontmatter & { excerpt: string };\n\nexport default (props: PageProps) => {\n  const { path, data } = props;\n\n  const siteTitle = (data as Query).site!.siteMetadata!.title;\n  const posts = (data as Query).allMarkdownRemark.edges\n    .filter(currentValue => currentValue.node.frontmatter?.date.endsWith(CURRENT_YEAR))\n    .reduce((mergedValue: IPostType[], currentValue) => {\n      mergedValue.push({\n        ...currentValue.node.frontmatter,\n        slug: currentValue.node.fields?.slug || '',\n        excerpt: currentValue.node.excerpt || ''\n      });\n      return mergedValue;\n    }, []);\n\n  return (\n    <DefaultLayout title={siteTitle!} pathname={path}>\n      {posts.length > 0 ? (\n        posts.map(({ title, tags, slug, date, excerpt }: IPostType, index: number) => (\n          <StyledCommonArticle key={`${title}-${index}`} rhythm={rhythm(2)}>\n            <PostHeader title={title!} path={slug || undefined} date={date} />\n            {excerpt && (\n              <StyledCommonDivPost rhythm={rhythm(0.5)}>\n                <StyledPExcerpt scale={scale(0)}>{excerpt}</StyledPExcerpt>\n              </StyledCommonDivPost>\n            )}\n            {tags?.length ? <PostTags tags={tags} /> : null}\n          </StyledCommonArticle>\n        ))\n      ) : (\n        <StyledCommonDivEmpty rhythm={rhythm(4)}>컨텐츠가 없습니다.</StyledCommonDivEmpty>\n      )}\n    </DefaultLayout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 180)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\nimport { Link } from 'gatsby';\n\nimport { scale, rhythm } from '~/configs/typography';\nimport { StyledCommonH1Title } from '~/components/common';\nimport speech from '~/utils/speech';\n\nconst StyledHeader = styled.header<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledH1Link = styled(Link)`\n  color: #000;\n  &:hover {\n    color: #172fde;\n  }\n`;\n\nconst StyledSpeechSpan = styled.span`\n  display: inline-block;\n  width: 30px;\n  height: 30px;\n  background-image: url(/img/post/speaker.png);\n  background-size: 22px;\n  background-repeat: no-repeat;\n  background-position: 6px 10px;\n  &:active {\n    background-position: 6px 11px;\n  }\n`;\n\nconst StyledTime = styled.time<{ scale: BaseLine }>`\n  color: #898989;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n`;\n\ninterface IProps {\n  title: string;\n  path?: string;\n  date: string;\n  isPost?: boolean;\n}\n\nconst PostHeader: React.FunctionComponent<IProps> = ({ title, path, date, isPost = false }) => {\n  return (\n    <StyledHeader rhythm={rhythm(1.2)}>\n      <StyledCommonH1Title scale={scale(0.5)} rhythm={rhythm(0.2)}>\n        {path ? <StyledH1Link to={path!}>{title}</StyledH1Link> : title}\n        {isPost && <StyledSpeechSpan onClick={() => speech.sendContentsMessage()} />}\n      </StyledCommonH1Title>\n      <p className=\"post-meta\">\n        <StyledTime dateTime={date} scale={scale(-0.1)}>\n          {date}\n        </StyledTime>\n      </p>\n    </StyledHeader>\n  );\n};\n\nexport default PostHeader;\n"],"sourceRoot":""}