{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/PostHeader.tsx"],"names":["StyledArticle","styled","article","props","rhythm","StyledDivPost","div","StyledDivEmpty","StyledPExcerpt","p","scale","fontSize","lineHeight","CURRENT_YEAR","Date","getFullYear","toString","path","data","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","filter","currentValue","node","frontmatter","date","endsWith","reduce","mergedValue","push","slug","fields","excerpt","pathname","length","map","index","tags","key","undefined","query","StyledHeader","header","StyledH1Link","Link","StyledTime","time","PostHeader","to","className","dateTime"],"mappings":"wQAaMA,EAAgBC,IAAOC,QAAV,2EAAGD,CAAH,wBACA,SAAAE,GAAK,OAAIA,EAAMC,UAG5BC,EAAgBJ,IAAOK,IAAV,2EAAGL,CAAH,wBACA,SAAAE,GAAK,OAAIA,EAAMC,UAE5BG,EAAiBN,IAAOK,IAAV,4EAAGL,CAAH,uCAEJ,SAAAE,GAAK,OAAIA,EAAMC,UAGzBI,EAAiBP,IAAOQ,EAAV,4EAAGR,CAAH,kEAEL,SAAAE,GAAK,OAAIA,EAAMO,MAAMC,YACnB,SAAAR,GAAK,OAAIA,EAAMO,MAAME,cAIhCC,GAAe,IAAIC,MAAOC,cAAcC,WAI/B,mBAACb,GAAqB,IAC3Bc,EAAed,EAAfc,KAAMC,EAASf,EAATe,KAERC,EAAaD,EAAeE,KAAMC,aAAcC,MAChDC,EAASL,EAAeM,kBAAkBC,MAC7CC,QAAO,SAAAC,GAAY,uBAAIA,EAAaC,KAAKC,mBAAtB,aAAI,EAA+BC,KAAKC,SAASlB,MACpEmB,QAAO,SAACC,EAA0BN,GAAiB,MAMlD,OALAM,EAAYC,KAAZ,iBACKP,EAAaC,KAAKC,YADvB,CAEEM,MAAM,UAAAR,EAAaC,KAAKQ,cAAlB,eAA0BD,OAAQ,GACxCE,QAASV,EAAaC,KAAKS,SAAW,MAEjCJ,IACN,IAEL,OACE,gCACE,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAQX,MAAOH,EAAYmB,SAAUrB,GAClCM,EAAMgB,OAAS,EACdhB,EAAMiB,KAAI,WAAkDC,GAAlD,IAAGnB,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,KAAMP,EAAhB,EAAgBA,KAAML,EAAtB,EAAsBA,KAAMO,EAA5B,EAA4BA,QAA5B,OACR,gBAACrC,EAAD,CAAe2C,IAAQrB,EAAL,IAAcmB,EAASrC,OAAQA,YAAO,IACtD,gBAAC,IAAD,CAAYkB,MAAOA,EAAQa,KAAMA,QAAQS,EAAWd,KAAMA,IACzDO,GACC,gBAAChC,EAAD,CAAeD,OAAQA,YAAO,KAC5B,gBAACI,EAAD,CAAgBE,MAAOA,YAAM,IAAK2B,KAGrCK,aAAA,EAAAA,EAAMH,SAAU,gBAAC,IAAD,CAAUG,KAAMA,QAIrC,gBAACnC,EAAD,CAAgBH,OAAQA,YAAO,IAA/B,iBAOH,IAAMyC,EAAQ,c,oCC3ErB,gEAQMC,EAAe7C,IAAO8C,OAAV,8EAAG9C,CAAH,wBACC,SAAAE,GAAK,OAAIA,EAAMC,UAG5B4C,EAAe/C,YAAOgD,KAAV,8EAAGhD,CAAH,wCAOZiD,EAAajD,IAAOkD,KAAV,4EAAGlD,CAAH,kDAED,SAAAE,GAAK,OAAIA,EAAMO,MAAMC,YACnB,SAAAR,GAAK,OAAIA,EAAMO,MAAME,cAwBvBwC,IAfuB,SAAC,GAA0B,IAAxB9B,EAAwB,EAAxBA,MAAOa,EAAiB,EAAjBA,KAAML,EAAW,EAAXA,KACpD,OACE,gBAACgB,EAAD,CAAc1C,OAAQA,YAAO,MAC3B,gBAAC,IAAD,CAAeM,MAAOA,YAAM,IAAMN,OAAQA,YAAO,KAC9C+B,EAAO,gBAACa,EAAD,CAAcK,GAAIlB,GAAQb,GAAwBA,GAE5D,qBAAGgC,UAAU,aACX,gBAACJ,EAAD,CAAYK,SAAUzB,EAAMpB,MAAOA,aAAO,KACvCoB","file":"component---src-pages-index-tsx-e2b579248325def5b8e6.js","sourcesContent":["import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\n\nimport Layout from '~/components/Layout';\nimport SEO from '~/components/SEO';\nimport { Query, MarkdownRemarkFields, MarkdownRemarkFrontmatter } from '~/gatsby-graphql-types';\nimport { rhythm } from '~/configs/typography';\nimport { scale } from '~/configs/typography';\nimport PostHeader from '~/components/PostHeader';\nimport PostTags from '~/components/PostTags';\n\nconst StyledArticle = styled.article<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledDivPost = styled.div<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\nconst StyledDivEmpty = styled.div<{ rhythm: string }>`\n  text-align: center;\n  margin-top: ${props => props.rhythm};\n`;\n\nconst StyledPExcerpt = styled.p<{ scale: BaseLine }>`\n  font-weight: 400;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n  color: #353535;\n`;\n\nconst CURRENT_YEAR = new Date().getFullYear().toString();\n\ntype IPostType = MarkdownRemarkFields & MarkdownRemarkFrontmatter & { excerpt: string };\n\nexport default (props: PageProps) => {\n  const { path, data } = props;\n\n  const siteTitle = (data as Query).site!.siteMetadata!.title;\n  const posts = (data as Query).allMarkdownRemark.edges\n    .filter(currentValue => currentValue.node.frontmatter?.date.endsWith(CURRENT_YEAR))\n    .reduce((mergedValue: IPostType[], currentValue) => {\n      mergedValue.push({\n        ...currentValue.node.frontmatter,\n        slug: currentValue.node.fields?.slug || '',\n        excerpt: currentValue.node.excerpt || ''\n      });\n      return mergedValue;\n    }, []);\n\n  return (\n    <>\n      <SEO />\n      <Layout title={siteTitle!} pathname={path}>\n        {posts.length > 0 ? (\n          posts.map(({ title, tags, slug, date, excerpt }: IPostType, index: number) => (\n            <StyledArticle key={`${title}-${index}`} rhythm={rhythm(2)}>\n              <PostHeader title={title!} slug={slug || undefined} date={date} />\n              {excerpt && (\n                <StyledDivPost rhythm={rhythm(0.5)}>\n                  <StyledPExcerpt scale={scale(0)}>{excerpt}</StyledPExcerpt>\n                </StyledDivPost>\n              )}\n              {tags?.length && <PostTags tags={tags} />}\n            </StyledArticle>\n          ))\n        ) : (\n          <StyledDivEmpty rhythm={rhythm(4)}>컨텐츠가 없습니다.</StyledDivEmpty>\n        )}\n      </Layout>\n    </>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 180)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\nimport { Link } from 'gatsby';\n\nimport { scale, rhythm } from '~/configs/typography';\nimport { StyledH1Title } from '~/components/common';\n\nconst StyledHeader = styled.header<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledH1Link = styled(Link)`\n  color: #000;\n  &:hover {\n    color: #172fde;\n  }\n`;\n\nconst StyledTime = styled.time<{ scale: BaseLine }>`\n  color: #898989;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n`;\n\ninterface IProps {\n  title: string;\n  slug?: string;\n  date: string;\n}\n\nconst PostHeader: React.SFC<IProps> = ({ title, slug, date }) => {\n  return (\n    <StyledHeader rhythm={rhythm(1.2)}>\n      <StyledH1Title scale={scale(0.5)} rhythm={rhythm(0.2)}>\n        {slug ? <StyledH1Link to={slug!}>{title}</StyledH1Link> : title}\n      </StyledH1Title>\n      <p className=\"post-meta\">\n        <StyledTime dateTime={date} scale={scale(-0.1)}>\n          {date}\n        </StyledTime>\n      </p>\n    </StyledHeader>\n  );\n};\n\nexport default PostHeader;\n"],"sourceRoot":""}