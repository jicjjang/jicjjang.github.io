{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/PostHeader.tsx"],"names":["StyledPExcerpt","styled","p","props","scale","fontSize","lineHeight","CURRENT_YEAR","Date","getFullYear","toString","path","data","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","filter","currentValue","node","frontmatter","date","endsWith","reduce","mergedValue","push","slug","fields","excerpt","pathname","length","map","index","tags","key","rhythm","undefined","query","StyledHeader","header","StyledH1Link","Link","StyledTime","time","PostHeader","to","className","dateTime"],"mappings":"wQAaMA,EAAiBC,IAAOC,EAAV,4EAAGD,CAAH,kEAEL,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,YACnB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,cAIhCC,GAAe,IAAIC,MAAOC,cAAcC,WAI/B,mBAACP,GAAqB,IAC3BQ,EAAeR,EAAfQ,KAAMC,EAAST,EAATS,KAERC,EAAaD,EAAeE,KAAMC,aAAcC,MAChDC,EAASL,EAAeM,kBAAkBC,MAC7CC,QAAO,SAAAC,GAAY,uBAAIA,EAAaC,KAAKC,mBAAtB,aAAI,EAA+BC,KAAKC,SAASlB,MACpEmB,QAAO,SAACC,EAA0BN,GAAiB,MAMlD,OALAM,EAAYC,KAAZ,iBACKP,EAAaC,KAAKC,YADvB,CAEEM,MAAM,UAAAR,EAAaC,KAAKQ,cAAlB,eAA0BD,OAAQ,GACxCE,QAASV,EAAaC,KAAKS,SAAW,MAEjCJ,IACN,IAEL,OACE,gBAAC,IAAD,CAAeX,MAAOH,EAAYmB,SAAUrB,GACzCM,EAAMgB,OAAS,EACdhB,EAAMiB,KAAI,WAAkDC,GAAlD,IAAGnB,EAAH,EAAGA,MAAOoB,EAAV,EAAUA,KAAMP,EAAhB,EAAgBA,KAAML,EAAtB,EAAsBA,KAAMO,EAA5B,EAA4BA,QAA5B,OACR,gBAAC,IAAD,CAAqBM,IAAQrB,EAAL,IAAcmB,EAASG,OAAQA,YAAO,IAC5D,gBAAC,IAAD,CAAYtB,MAAOA,EAAQL,KAAMkB,QAAQU,EAAWf,KAAMA,IACzDO,GACC,gBAAC,IAAD,CAAqBO,OAAQA,YAAO,KAClC,gBAACtC,EAAD,CAAgBI,MAAOA,YAAM,IAAK2B,KAGrCK,aAAA,EAAAA,EAAMH,QAAS,gBAAC,IAAD,CAAUG,KAAMA,IAAW,SAI/C,gBAAC,IAAD,CAAsBE,OAAQA,YAAO,IAArC,gBAMD,IAAME,EAAQ,c,oCC5DrB,gEAQMC,EAAexC,IAAOyC,OAAV,8EAAGzC,CAAH,wBACC,SAAAE,GAAK,OAAIA,EAAMmC,UAG5BK,EAAe1C,YAAO2C,KAAV,8EAAG3C,CAAH,wCAOZ4C,EAAa5C,IAAO6C,KAAV,4EAAG7C,CAAH,kDAED,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,YACnB,SAAAF,GAAK,OAAIA,EAAMC,MAAME,cAwBvByC,IAfuB,SAAC,GAA0B,IAAxB/B,EAAwB,EAAxBA,MAAOL,EAAiB,EAAjBA,KAAMa,EAAW,EAAXA,KACpD,OACE,gBAACiB,EAAD,CAAcH,OAAQA,YAAO,MAC3B,gBAAC,IAAD,CAAqBlC,MAAOA,YAAM,IAAMkC,OAAQA,YAAO,KACpD3B,EAAO,gBAACgC,EAAD,CAAcK,GAAIrC,GAAQK,GAAwBA,GAE5D,qBAAGiC,UAAU,aACX,gBAACJ,EAAD,CAAYK,SAAU1B,EAAMpB,MAAOA,aAAO,KACvCoB","file":"component---src-pages-index-tsx-f9f0d3dd62cb8d319abd.js","sourcesContent":["import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\n\nimport DefaultLayout from '~/components/layout/Default';\nimport { Query, MarkdownRemarkFields, MarkdownRemarkFrontmatter } from '~/gatsby-graphql-types';\nimport { rhythm } from '~/configs/typography';\nimport { scale } from '~/configs/typography';\nimport PostHeader from '~/components/PostHeader';\nimport PostTags from '~/components/PostTags';\nimport { StyledCommonArticle, StyledCommonDivPost, StyledCommonDivEmpty } from '~/components/common';\n\nconst StyledPExcerpt = styled.p<{ scale: BaseLine }>`\n  font-weight: 400;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n  color: #353535;\n`;\n\nconst CURRENT_YEAR = new Date().getFullYear().toString();\n\ntype IPostType = MarkdownRemarkFields & MarkdownRemarkFrontmatter & { excerpt: string };\n\nexport default (props: PageProps) => {\n  const { path, data } = props;\n\n  const siteTitle = (data as Query).site!.siteMetadata!.title;\n  const posts = (data as Query).allMarkdownRemark.edges\n    .filter(currentValue => currentValue.node.frontmatter?.date.endsWith(CURRENT_YEAR))\n    .reduce((mergedValue: IPostType[], currentValue) => {\n      mergedValue.push({\n        ...currentValue.node.frontmatter,\n        slug: currentValue.node.fields?.slug || '',\n        excerpt: currentValue.node.excerpt || ''\n      });\n      return mergedValue;\n    }, []);\n\n  return (\n    <DefaultLayout title={siteTitle!} pathname={path}>\n      {posts.length > 0 ? (\n        posts.map(({ title, tags, slug, date, excerpt }: IPostType, index: number) => (\n          <StyledCommonArticle key={`${title}-${index}`} rhythm={rhythm(2)}>\n            <PostHeader title={title!} path={slug || undefined} date={date} />\n            {excerpt && (\n              <StyledCommonDivPost rhythm={rhythm(0.5)}>\n                <StyledPExcerpt scale={scale(0)}>{excerpt}</StyledPExcerpt>\n              </StyledCommonDivPost>\n            )}\n            {tags?.length ? <PostTags tags={tags} /> : null}\n          </StyledCommonArticle>\n        ))\n      ) : (\n        <StyledCommonDivEmpty rhythm={rhythm(4)}>컨텐츠가 없습니다.</StyledCommonDivEmpty>\n      )}\n    </DefaultLayout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt(pruneLength: 180)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\nimport { Link } from 'gatsby';\n\nimport { scale, rhythm } from '~/configs/typography';\nimport { StyledCommonH1Title } from '~/components/common';\n\nconst StyledHeader = styled.header<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledH1Link = styled(Link)`\n  color: #000;\n  &:hover {\n    color: #172fde;\n  }\n`;\n\nconst StyledTime = styled.time<{ scale: BaseLine }>`\n  color: #898989;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n`;\n\ninterface IProps {\n  title: string;\n  path?: string;\n  date: string;\n}\n\nconst PostHeader: React.SFC<IProps> = ({ title, path, date }) => {\n  return (\n    <StyledHeader rhythm={rhythm(1.2)}>\n      <StyledCommonH1Title scale={scale(0.5)} rhythm={rhythm(0.2)}>\n        {path ? <StyledH1Link to={path!}>{title}</StyledH1Link> : title}\n      </StyledCommonH1Title>\n      <p className=\"post-meta\">\n        <StyledTime dateTime={date} scale={scale(-0.1)}>\n          {date}\n        </StyledTime>\n      </p>\n    </StyledHeader>\n  );\n};\n\nexport default PostHeader;\n"],"sourceRoot":""}