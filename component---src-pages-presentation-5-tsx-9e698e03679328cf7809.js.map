{"version":3,"sources":["webpack:///./src/configs/urls.ts","webpack:///./src/pages/presentation/5.tsx","webpack:///./src/components/layout/Presentation/index.tsx"],"names":["PAGE_URL","HOME","ARCHIVE","RESUME","PRESENTATION","PRESENTATION_1","PRESENTATION_2","PRESENTATION_3","PRESENTATION_4","PRESENTATION_5","PRESENTATION_6","PRESENTATION_7","PRESENTATION_8","PRESENTATION_9","PRESENTATION_10","PRESENTATION_DATA","title","date","tags","removeTrailingSlash","path","endsWith","slice","vuePwaStart","pLocation","location","pathname","className","data-background","style","listStyle","margin","fontSize","href","target","textAlign","width","verticalAlign","display","border","src","data-trim","data-noescape","PresentationLayout","description","children","useState","isLoaded","setIsLoaded","isInitLoadedReveal","repeatEvent","setInterval","useCallback","window","Reveal","initLoadedReveal","isReady","console","log","clearInterval","initialize","dependencies","async","callback","hljs","initHighlightingOnLoad","minScale","maxScale","useEffect","layout","link","REVEAL_LIB","script","position","rel"],"mappings":"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","file":"component---src-pages-presentation-5-tsx-9e698e03679328cf7809.js","sourcesContent":["export const PAGE_URL = {\n  HOME: '/',\n  ARCHIVE: '/archive',\n  RESUME: '/resume',\n  PRESENTATION: '/presentation',\n  PRESENTATION_1: '/presentation/1',\n  PRESENTATION_2: '/presentation/2',\n  PRESENTATION_3: '/presentation/3',\n  PRESENTATION_4: '/presentation/4',\n  PRESENTATION_5: '/presentation/5',\n  PRESENTATION_6: '/presentation/6',\n  PRESENTATION_7: '/presentation/7',\n  PRESENTATION_8: '/presentation/8',\n  PRESENTATION_9: '/presentation/9',\n  PRESENTATION_10: '/presentation/10'\n};\n\nexport interface IPresentationData {\n  title: string;\n  path?: string;\n  tags: string[];\n  date: string;\n}\nexport const PRESENTATION_DATA: { [key: string]: IPresentationData } = {\n  [PAGE_URL.PRESENTATION_1]: {\n    title: 'React.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 23, 2016',\n    tags: ['react', 'nhn', 'bugs']\n  },\n  [PAGE_URL.PRESENTATION_2]: {\n    title: 'Vue.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Apr, 08, 2017',\n    tags: ['vue', 'nhn', 'bugs']\n  },\n  [PAGE_URL.PRESENTATION_3]: {\n    title: '현실적인 개발로 먹고살기',\n    date: 'July, 15, 2017',\n    tags: ['developer', 'kookmin', 'university']\n  },\n  [PAGE_URL.PRESENTATION_4]: {\n    title: 'How to use RxJs - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 30, 2017',\n    tags: ['rxjs', 'nhn', 'bugs']\n  },\n  [PAGE_URL.PRESENTATION_5]: {\n    title: 'Vue pwa 시작하기 - Vuetiful korea 3rd 발표자료',\n    date: 'Nov, 30, 2017',\n    tags: ['vue', 'pwa', 'vuetifulkorea', '3rd']\n  },\n  [PAGE_URL.PRESENTATION_6]: {\n    title: 'Graphql 시작하기 (server) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 05, 2018',\n    tags: ['graphql', 'server', 'nhn', 'bugs']\n  },\n  [PAGE_URL.PRESENTATION_7]: {\n    title: 'Graphql 시작하기 (client) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 06, 2018',\n    tags: ['graphql', 'client', 'nhn', 'bugs']\n  },\n  [PAGE_URL.PRESENTATION_8]: {\n    title: 'Apollo로 알아보는 Vue in the GraphQL - Vuetiful korea 4th 발표자료',\n    date: 'Apr, 16, 2018',\n    tags: ['vue', 'graphql', 'apollo', 'vuetifulkorea', '4th']\n  },\n  [PAGE_URL.PRESENTATION_9]: {\n    title: 'Vuetiful korea 5회 세미나 내용 정리',\n    date: 'Aug, 15, 2018',\n    tags: ['vue', 'vuetifulkorea', '5th']\n  },\n  [PAGE_URL.PRESENTATION_10]: {\n    title: 'Sentry - Kakaopay FE 세미나',\n    date: 'Jul, 09, 2020',\n    tags: ['react', 'sentry', 'sourcemap']\n  }\n};\n\nexport const compareTrailingSlash = (prevUrl: string, nextUrl: string) =>\n  (prevUrl.endsWith('/') ? prevUrl.slice(0, -1) : prevUrl) === (nextUrl.endsWith('/') ? nextUrl.slice(0, -1) : nextUrl);\n\nexport const removeTrailingSlash = (path: string) => (path.endsWith('/') ? path.slice(0, -1) : path);\n","import * as React from 'react';\nimport { PageProps } from 'gatsby';\n\nimport PresentationLayout from '~/components/layout/Presentation';\nimport { PRESENTATION_DATA, removeTrailingSlash } from '~/configs/urls';\n\nexport default function vuePwaStart({ location: pLocation }: PageProps) {\n  return (\n    <PresentationLayout title={PRESENTATION_DATA[removeTrailingSlash(pLocation.pathname)].title || ''}>\n      <div className=\"slides\">\n        <section data-background=\"/img/presentation/vue-pwa-start/vuetifulkorea3_background.png\">\n          <aside className=\"notes\">\n            안녕하세요. NHN벅스 최준석입니다. PWA에 대한 정의와 원리, 사용법 등에 대해 간단한 경험기를 발표해보려고\n            합니다. 잘부탁드립니다.\n          </aside>\n        </section>\n\n        <section>\n          <div>\n            <h2>순서</h2>\n            <ul style={{ listStyle: 'none', margin: '0' }}>\n              <li className=\"fragment\">1. 지루한 pwa 설명</li>\n              <li className=\"fragment\">2. 설치 및 개발</li>\n              <li className=\"fragment\">3. 사용하면서 어려웠던 부분</li>\n              <li className=\"fragment\">4. Push Notification</li>\n              <li className=\"fragment\">Q &amp; A</li>\n            </ul>\n          </div>\n        </section>\n\n        <section>\n          <section>\n            <h2>1. 지루한 pwa 설명</h2>\n            <ul className=\"fragment\" style={{ fontSize: '32px' }}>\n              <li>프로그레시브 - 모든 브라우저</li>\n              <li>반응형 - 모든 디바이스</li>\n              <li>연결 독립적 - Service Worker를 사용. 오프라인, 느린 네트워크에서도 작동</li>\n              <li>\n                앱과 유사 -{' '}\n                <a\n                  href=\"https://github.com/google/WebFundamentals/blob/master/src/content/ko/fundamentals/architecture/app-shell.md\"\n                  target=\"_blank\">\n                  앱 셸\n                </a>\n                모드에서 작성. 앱 스타일의 동작\n              </li>\n              <li>\n                최신 상태 -{' '}\n                <a href=\"https://b.limminho.com/archives/1384\" target=\"_blank\">\n                  Service Worker\n                </a>\n                에 업데이트 프로세스가 있음\n              </li>\n              <li>안전 - HTTPS를 통해 제공. (개발시 로컬은 http로 가능)</li>\n              <li>검색 가능</li>\n              <li>재참여 가능 - 푸시 알림과 같은 기능</li>\n              <li>설치 가능 - 앱 스토어 사용 없이 설치</li>\n              <li>링크 연결 가능 - URL을 통해 손쉽게 공유 및 설치</li>\n            </ul>\n            <aside className=\"notes\">\n              pwa의 특징들입니다. 기본적으로 위와 같은 특징들을 가지는 것이 pwa라고 할 수 있으며 지향하진 않지만 필요에\n              따라 몇몇 사항에 대한 지원이 빠질 수 있습니다.\n            </aside>\n          </section>\n          <section>\n            <h3>자세하게 알아보겠습니다</h3>\n          </section>\n          <section>\n            <h3>앱 셸이란?</h3>\n            <div className=\"fragment\" style={{ fontSize: '32px', textAlign: 'left' }}>\n              애플리케이션 셸은 사용자 인터페이스를 지원하는 최소한의 HTML, CSS, 자바스크립트입니다. 애플리케이션 셸의\n              특징은 다음과 같습니다.\n            </div>\n            <br />\n            <ul className=\"fragment\" style={{ fontSize: '32px', width: '100%', textAlign: 'left' }}>\n              <li>로드 속도가 빠릅니다.</li>\n              <li>캐시됩니다.</li>\n              <li>콘텐츠를 동적으로 표시합니다.</li>\n            </ul>\n            <br />\n            <div style={{ fontSize: '20px' }} className=\"fragment\">\n              참고 - https://support.google.com/partners/answer/7336597?hl=ko\n            </div>\n            <aside className=\"notes\">\n              설명중에 바로 알기 힘든 용어들을 간단히 설명해보겠습니다. 앱 셸이란 것은 UI의 지원을 위한 최소한의 html,\n              css, js 입니다. 조직 단위 중에 셸이란 것이 있는 것과 똑같습니다. 캐시가 되서 다른 요소들이 나오지 않을 때,\n              기본적으로 나와야 하는 요소들이기 때문에 앱 셸에서의 구조를 잘 다져놓고 개발을 해야합니다.\n            </aside>\n          </section>\n          <section>\n            <h3>앱 셸 디자인 시 고려해야할 점</h3>\n            <div className=\"fragment\" style={{ fontSize: '32px', textAlign: 'left' }}>\n              <ul>\n                <li>화면에 나와야 할 기본적인 구성</li>\n                <li>필수적으로 들어와야 할 데이터</li>\n                <li>필수적으로 들어와야 할 리소스 ex) 이미지, js, css...</li>\n              </ul>\n            </div>\n            <aside className=\"notes\">\n              기본적인 요소들을 앱 셸이라고 하기 때문에, 개발 시작 전에 어느정도의 요소까지 보여줄 지 잘 계획하고\n              들어가야 합니다.\n            </aside>\n          </section>\n          <section>\n            <h3>그렇다면 Service Worker는?</h3>\n            <div className=\"fragment\" style={{ fontSize: '32px', textAlign: 'left' }}>\n              Service Worker란 브라우저가 웹페이지와 별도로 백그라운드에서 실행하는 스크립트로서, 웹페이지나 사용자\n              상호작용 없이도 다양한 기능을 사용할 수 있게 합니다.\n            </div>\n            <br />\n            <div className=\"fragment\">\n              <ul style={{ fontSize: '32px', width: '40%', verticalAlign: 'top' }}>\n                <li>설치</li>\n                <li>푸시 알림</li>\n                <li>백그라운드 동기화</li>\n                <li>주기적 동기화 (업데이트)</li>\n                <li>기타 등등...</li>\n              </ul>\n              <div style={{ display: 'inline-block', width: '50%' }}>\n                <img\n                  style={{ border: 'none', margin: '0 auto' }}\n                  src=\"/img/presentation/vue-pwa-start/service-worker.gif\"\n                />\n              </div>\n            </div>\n            <div style={{ fontSize: '20px' }} className=\"fragment\">\n              참고 - https://support.google.com/partners/answer/7336697?hl=ko\n            </div>\n            <aside className=\"notes\">\n              service worker는 설명대로 브라우저와 별도로 실행하기 때문에, 브라우저를 종료한 상태에서 돌아갑니다. 이\n              뿐만 아니라, 개발자의 network가 끊킨 상황에서 app에 대한 통제를 할 수 있는 수단이기 때문에 매우 중요한\n              개념입니다. 이미지에 나와있는대로 servie worker가 설치되면 install 이벤트가 네트워크를 통해 들어가고, 위에\n              말씀드린 웹 셸이나, 부가적으로 설정해놓은 정보들이 caching 된 후 실행됩니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h2>2. 설치 및 개발</h2>\n            <div>\n              <pre>\n                <code data-trim={true} data-noescape={true}>\n                  $ vue init pwa my-project $ cd my-project $ npm i\n                </code>\n              </pre>\n            </div>\n            <div style={{ fontSize: '20px' }}>\n              <a href=\"https://developers.google.com/web/fundamentals/codelabs/?hl=ko\" target=\"_blank\">\n                구글 pwa 기본 튜토리얼\n              </a>\n            </div>\n            <div style={{ fontSize: '20px' }}>\n              <a href=\"https://github.com/seouldrinker/seoulDrinkerPwa\" target=\"_blank\">\n                https://github.com/seouldrinker/seoulDrinkerPwa\n              </a>\n            </div>\n            <aside className=\"notes\">\n              기본적인 template을 지원해주기 때문에 pwa template으로 간단하게 설치할 수 있습니다. 아래 url은 구글의 pwa\n              튜토리얼과 제가 ppt를 준비하면서 개발했던 자료입니다.\n            </aside>\n          </section>\n          <section>\n            <h3>그 다음은...</h3>\n            <div className=\"fragment\" style={{ width: '80%', margin: '0 auto' }}>\n              <img style={{ display: 'block', margin: '0 auto' }} src=\"/img/presentation/vue-pwa-start/develop.png\" />\n            </div>\n            <aside className=\"notes\">\n              네 그 다음 세팅은 열심히 개발하는겁니다. 기본적으로 template의 vue 코딩하는 부분은 동일하기 때문에\n              프로젝트를 진행해주시면 됩니다.\n            </aside>\n          </section>\n          <section>\n            <h3>코딩 끝! 다음은 세팅...?</h3>\n            <div className=\"fragment\">\n              <div style={{ display: 'inline-block', width: '30%', verticalAlign: 'top' }}>\n                <img style={{ display: 'block', margin: '0 auto' }} src=\"/img/presentation/vue-pwa-start/folder1.png\" />\n              </div>\n              <div style={{ display: 'inline-block', width: '30%', verticalAlign: 'top' }}>\n                <img style={{ display: 'block', margin: '0 auto' }} src=\"/img/presentation/vue-pwa-start/folder2.png\" />\n              </div>\n            </div>\n            <aside className=\"notes\">\n              src 디렉토리에 이전에 vue 프로젝트와 동일하게 프로젝트를 진행하셨다면 위 경로들을 보셔야 합니다. 빌드\n              설정과 앱 설치 시의 설정인 manifest 설정입니다. 앞서 링크를 걸어놨던 구글 pwa 튜토리얼와\n              vue-pwa-template를 하면서 해결하기에 시간이 조금 소요되었던 내용입니다. 오늘 발표의 내용은 이것에 대한\n              내용이 대부분입니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h2>3. 사용하면서 어려웠던 부분</h2>\n            <div>\n              앱 개발 후{' '}\n              <a href=\"https://developers.google.com/web/fundamentals/codelabs/?hl=ko\" target=\"_blank\">\n                구글 pwa 튜토리얼\n              </a>\n              을 참고하여 세팅을 시작\n            </div>\n            <aside className=\"notes\">\n              앱 개발을 마치고 튜토리얼을 보면서 세팅을 시작했습니다. 참고하여 세팅을 시작했습니다. 제가 준비한 예제에선\n              production 모드에만 세팅을 했습니다 ^^; 그 이유는 뒤에서 설명드릴게요.\n            </aside>\n          </section>\n          <section>\n            <h3>3-1. Service Worker 등록하기</h3>\n            <div>기본 방법</div>\n            <div>\n              <div style={{ display: 'inline-block', width: '48%', verticalAlign: 'top' }}>\n                <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code1.png\" />\n              </div>\n              <div style={{ display: 'inline-block', width: '48%' }}>\n                <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code2.png\" />\n              </div>\n            </div>\n            <aside className=\"notes\">\n              service worker는 처음에 말씀드린대로 브라우저와 별개로 돌기 때문에, 현재 브라우저에 등록을 시켜줘야\n              합니다. service worker 에서는 여러가지 이벤트를 걸 수 있고 코드에서는 install 했을 때와, caching이 끝나고\n              activate가 될 때의 이벤트 리스너 입니다.\n            </aside>\n          </section>\n          <section>\n            <h3>3-1. Service Worker 등록하기</h3>\n            <div>webpack.dev.conf.js 방법</div>\n            <div style={{ display: 'inline-block', width: '48%', verticalAlign: 'top' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code3.png\" />\n            </div>\n            <div style={{ display: 'inline-block', width: '48%' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code4.png\" />\n            </div>\n            <aside className=\"notes\">\n              vue-pwa-template dev 모드에서는 webpack에 의해 service-worker-dev.js가 불러져 옵니다. 그런데, register\n              부분이 없이 service worker의 event listener만 있습니다. 사실 그래서 dev 모드에서는 바로 사용을 할 수\n              없습니다. localhost에서 사용은 할 수 있지만, 이 부분에 대한 설정을 따로 해줘야 합니다.\n            </aside>\n          </section>\n          <section>\n            <h3>3-1. Service Worker 등록하기</h3>\n            <div>webpack.prod.conf.js 방법</div>\n            <div style={{ display: 'inline-block', width: '48%', verticalAlign: 'top' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code5.png\" />\n            </div>\n            <div style={{ display: 'inline-block', width: '48%' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code6.png\" />\n            </div>\n            <aside className=\"notes\">\n              production 모드에서는 dev와 마찬가지로 webpack.prod.conf.js에 HtmlWebpackPlugin 라이브러리가 있지만,\n              추가적으로 SWPrecacheWebpackPlugin 라이브러리가 있습니다. 그리고 service worker 파일에 register가 있죠.\n            </aside>\n          </section>\n          <section>\n            <h3>3-2. Webpack 설정하기</h3>\n            <div>SWPrecacheWebpackPlugin 라이브러리는 뭐하는 앤데...</div>\n            <br />\n            <div className=\"fragment\">=&gt;기본적인 설정 내용에 따라 추가 Service Worker를 자동으로 생성해주는 놈!</div>\n            <aside className=\"notes\">\n              여기서 혹시 이상한 점을 생각하신 분 있으신가요? 네, production 모드에서는 service worker event listener가\n              빠져있네요. 기본적인 설정 내용으로 Service Worker를 생성해줬으니, 제가 원하는 event Listener는 아직\n              안붙어있습니다. 그래서 SWPrecacheWebpackPlugin 라이브러리를 뒤져보니 runtimeCaching, importScripts 라는\n              놈들이 있더군요.\n            </aside>\n          </section>\n          <section>\n            <h3>3-2. Webpack 설정하기</h3>\n            <div>\n              <div style={{ display: 'inline-block', width: '48%', verticalAlign: 'top' }}>\n                <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code7.png\" />\n              </div>\n              <div style={{ display: 'inline-block', width: '48%' }}>\n                <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-pwa-start/code8.png\" />\n              </div>\n            </div>\n            <aside className=\"notes\">\n              runtimeCaching은 시작하면서 바로 캐시를 먹일 url에 대해 패턴으로 입력할 수 있는 설정이고 importScripts는\n              파일로 service-worker의 추가분을 넣을 수 있게 해주는 설정입니다. 저는 sw.js파일을 만들었구요, 이렇게\n              sw.js를 추가해주려면 build 시 sw.js 파일도 dist 디렉토리로 넘어가야 하기 때문에 static 파일을 넘기는\n              CopyWebpackPlugin으로 sw.js 파일을 함께 넘겨줍니다. sw.js 파일은 이전 service worker 파일들과 유사합니다.\n              이제 딱 service worker가 설정된 pwa 앱을 돌릴 수 있게 되었네요!\n            </aside>\n          </section>\n          <section>\n            <h3>3-3. Service Worker 마무으리!</h3>\n            <div className=\"fragment\">어후... 너무 복잡하다... 결론이 뭔데??</div>\n            <br />\n            <div>\n              <ol style={{ fontSize: '32px' }}>\n                <li className=\"fragment\">\n                  기본적으로 자신의 앱 코드 안에 서비스 워커를 등록 시켜주는 register 부분이 있어야 하고, 등록 될\n                  Service Worker 파일이 있어야 한다.\n                </li>\n                <li className=\"fragment\">그러나 vue-pwa-template 의 dev 버전에서는 register 부분이 따로 없다.</li>\n                <li className=\"fragment\">\n                  Production 모드에서는 register 부분이 있으나, 서비스 워커를 자동으로 생성해주는 부분만 있다. (커스텀\n                  시, 설정이 필요)\n                </li>\n                <li className=\"fragment\">\n                  Production 모드에서 사용하려면 webpack설정을 조금 바꿔줘야 하는데 문서가 쪼오금... 친절하진 않음.\n                </li>\n              </ol>\n            </div>\n\n            <aside className=\"notes\">\n              service worker에서의 결론은 바로 사용할 수 없다는 점입니다. dev모드, production 모드 상관없이 기본적인\n              설정이 필요하다는 점이죠.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <h2>4. Push Notification</h2>\n          <div className=\"fragment\" style={{ textAlign: 'left' }}>\n            사실 Vue에서의 세팅을 마치고 튜토리얼대로 하면 끝!\n          </div>\n          <div className=\"fragment\" style={{ textAlign: 'left' }}>\n            튜토리얼에서 알려주는대로 Service Worker에 Event를 등록해주세요.\n          </div>\n        </section>\n\n        <section>\n          <h2>Q&amp;A</h2>\n        </section>\n\n        <section>\n          <h1>끝</h1>\n          <div>감사합니다.</div>\n        </section>\n      </div>\n    </PresentationLayout>\n  );\n}\n","import * as React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport SEO from '~/components/SEO';\n\ndeclare var Reveal: RevealStatic & {\n  isReady: () => boolean;\n};\ndeclare var window: Window & {\n  Reveal?: RevealStatic & {\n    isReady: () => boolean;\n  };\n};\n\ninterface IProps {\n  title: string;\n  pathname?: string;\n  description?: string;\n}\n\nconst PresentationLayout: React.FunctionComponent<React.PropsWithChildren<IProps>> = ({\n  title,\n  // pathname = '/',\n  description,\n  children\n}) => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  let isInitLoadedReveal = false;\n  const repeatEvent = setInterval(\n    useCallback(() => {\n      if (typeof window !== 'undefined') {\n        if (window.Reveal && !isInitLoadedReveal) {\n          initLoadedReveal();\n          isInitLoadedReveal = true;\n        }\n\n        if (window.Reveal && !isLoaded) {\n          if (window.Reveal.isReady()) {\n            console.log('ready');\n            clearInterval(repeatEvent);\n            setIsLoaded(true);\n          } else {\n            initLoadedReveal();\n          }\n        }\n      }\n    }, [isLoaded]),\n    300\n  );\n\n  const initLoadedReveal = () => {\n    Reveal.initialize({\n      dependencies: [\n        { src: '/js/presentation/notes.min.js', async: true },\n        {\n          src: '/js/presentation/highlight.min.js',\n          async: true,\n          callback: () => {\n            //@ts-ignore\n            hljs.initHighlightingOnLoad();\n          }\n        }\n      ],\n      minScale: 0.66,\n      maxScale: 0.66\n    });\n  };\n\n  useEffect(() => {\n    if (isLoaded) {\n      console.log('layout');\n      window.Reveal?.layout(); // display가 block이 된 다음 layout을 다시 해야함\n    }\n  }, [isLoaded]);\n\n  return (\n    <>\n      <SEO title={title} description={description} link={REVEAL_LIB.link} script={REVEAL_LIB.script} />\n      <div className=\"reveal\" style={{ position: 'absolute', display: isLoaded ? 'block' : 'none' }}>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default PresentationLayout;\n\n/**\n * @description 스크립트를 히스토리 이동 시, 여러번 호출하는게 낭비같아서 window.Reveal이 있을 시 로드를 안하게 했더니 initialize나 layout을 다시 해도 화면이 안나옴\n */\nconst REVEAL_LIB = {\n  link: [\n    { rel: 'stylesheet', href: '/css/presentation/reveal.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/black.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/zenburn.min.css' }\n  ],\n  script: [\n    {\n      src: '/js/presentation/reveal.min.js'\n    },\n    {\n      src: '/js/presentation/head.min.js'\n    }\n  ]\n};\n"],"sourceRoot":""}