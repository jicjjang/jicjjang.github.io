(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{Jhe2:function(e,t,l){"use strict";l.r(t),l.d(t,"default",(function(){return c})),l.d(t,"query",(function(){return m}));var a=l("q1tI"),n=l("xbwu"),r=l("COYA");function c(e){var t=e.location,l=e.data.site.siteMetadata.social.linkedin||void 0;return a.createElement(n.a,{title:r.b[Object(r.c)(t.pathname)].title||""},a.createElement("div",{className:"slides"},a.createElement("section",null,a.createElement("h2",null,"GraphQL 시작하기 2"),a.createElement("h3",null,"NHN Bugs"),a.createElement("p",null,a.createElement("small",null,"Created by"," ",a.createElement("a",{href:l,target:"_blank"},"Junseok, Choi"))),a.createElement("aside",{className:"notes"},"Client GraphQL 시작하기 발표 시작하겠습니다. 이번 발표는 설명 위주 및 간단한 내용이었던 이전 발표와는 조금 다르게 예제 위주로 많이 다룰 예정입니다.")),a.createElement("section",null,a.createElement("div",null,a.createElement("h2",null,"순서"),a.createElement("ul",{style:{listStyle:"none",margin:"0"}},a.createElement("li",{className:"fragment"},"1. About GraphQL"),a.createElement("li",{className:"fragment"},"2. Example GraphQL"),a.createElement("li",{className:"fragment"},"Q & A")))),a.createElement("section",null,a.createElement("h2",null,"1. About GraphQL"),a.createElement("div",{style:{width:"90%",margin:"0 auto"}},a.createElement("div",{className:"fragment",style:{fontSize:"40px"}},"Client GraphQL은 필수가 아니다."),a.createElement("div",{className:"fragment",style:{fontSize:"40px"}},"하지만 사용한다면?")),a.createElement("aside",{className:"notes"},"1/2",a.createElement("br",null),"클라이언트 GraphQL은 앞선 `Server GraphQL`에서도 말했지만 Client GraphQL은 필수가 아닙니다.",a.createElement("br",null),"2/2",a.createElement("br",null),"하지만, 사용한다면 시너지 효과가 나올 수 있고, Vuex에서 (React는 Redux에서) 데이터 관리를 따로 할 필요 없이 설정만 해주면 알아서 Server GraphQL과 연동이 됩니다.")),a.createElement("section",null,a.createElement("section",null,a.createElement("h2",null,"2. Example GraphQL"),a.createElement("div",null,a.createElement("div",{className:"fragment",style:{display:"inline-block",width:"35%"}},a.createElement("a",{href:"https://github.com/Akryum/vue-apollo"},a.createElement("img",{src:"/img/presentation/graphql-start/vue-supply.png"}))),a.createElement("div",{className:"fragment",style:{display:"inline-block",width:"55%",verticalAlign:"top"}},a.createElement("a",{href:"https://github.com/Akryum/vue-supply"},a.createElement("img",{src:"/img/presentation/graphql-start/vue-apollo.png"})))),a.createElement("aside",{className:"notes"},"2/2",a.createElement("br",null),"Client GraphQL에서는 vue-apollo와 vue-supply 라이브러리를 사용할 예정입니다. vue-supply는 GraphQL에서 Vuex를 대체하는 용도로 사용합니다. 컴포넌트마다 가질 수 있는 props 데이터, 데이터를 주고받는 액션과 이를 적용하는 mutation 같은 기능을 하나로 통합하는 Vuex 대신, GraphQL에서 가져온 데이터를 직접 캐시하고, 이를 사용하게 해줍니다.")),a.createElement("section",null,a.createElement("h2",null,"Client GraphQL에 대해서"),a.createElement("div",null,a.createElement("div",{className:"fragment",style:{display:"inline-block",width:"40%"}},a.createElement("img",{src:"/img/presentation/graphql-start/apollo-provider.png"})),a.createElement("div",{className:"fragment"},a.createElement("a",{href:"https://github.com/Akryum/vueconf-2017-demo"},"Demo project"))),a.createElement("aside",{className:"notes"},"이 전 발표 자료에서 GraphQL에 대한 기본적인 설명은 모두 드렸습니다. typedef로의 타입 명시와 resolver로의 구현체를 만들어 적용하면 되는 것이었는데,",a.createElement("br",null),"1/2",a.createElement("br",null),"Client에서는 apollo-provider를 등록해 줘야 합니다. 이후엔 선택적으로 사용하는 vue-supply에 대해 vuex에 캐시를 입히는 부분, vuex의 액션 대신 서버와 데이터를 주고받을 쿼리문 등록 작업을 해주어야 합니다.",a.createElement("br",null),"2/2",a.createElement("br",null),"조금 더 자세한 내용에 대해서는 데모 프로젝트를 살펴보겠습니다."))),a.createElement("section",null,a.createElement("section",null,a.createElement("h1",null,"Q & A")),a.createElement("section",null,a.createElement("h1",null,"끝"),a.createElement("div",null,"감사합니다.")))))}var m="1641997136"}}]);
//# sourceMappingURL=component---src-pages-presentation-7-tsx-493a43dd55aafc4559ff.js.map