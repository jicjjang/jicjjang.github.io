{"version":3,"sources":["webpack:///./src/pages/presentation/7.tsx"],"names":["graphqlStartClient","pLocation","location","linkedinUrl","data","site","siteMetadata","social","linkedin","undefined","title","PRESENTATION_DATA","removeTrailingSlash","pathname","className","href","target","style","listStyle","margin","width","fontSize","display","src","verticalAlign","query"],"mappings":"4FAAA,6HAOe,SAASA,EAAT,GAAsE,IAA9BC,EAA8B,EAAxCC,SACrCC,EAD6E,EAAnBC,KAC5BC,KAAMC,aAAcC,OAAQC,eAAYC,EAE5E,OACE,gBAAC,IAAD,CAAoBC,MAAOC,IAAkBC,YAAoBX,EAAUY,WAAWH,OAAS,IAC7F,uBAAKI,UAAU,UACb,+BACE,4CACA,sCACA,yBACE,0CACa,IACX,qBAAGC,KAAMZ,EAAaa,OAAO,UAA7B,mBAKJ,yBAAOF,UAAU,SAAjB,gGAMF,+BACE,2BACE,gCACA,sBAAIG,MAAO,CAAEC,UAAW,OAAQC,OAAQ,MACtC,sBAAIL,UAAU,YAAd,oBACA,sBAAIA,UAAU,YAAd,sBACA,sBAAIA,UAAU,YAAd,YAKN,+BACE,8CACA,uBAAKG,MAAO,CAAEG,MAAO,MAAOD,OAAQ,WAClC,uBAAKL,UAAU,WAAWG,MAAO,CAAEI,SAAU,SAA7C,4BAGA,uBAAKP,UAAU,WAAWG,MAAO,CAAEI,SAAU,SAA7C,eAIF,yBAAOP,UAAU,SAAjB,MAEE,2BAFF,uEAIE,2BAJF,MAME,2BANF,gHAYF,+BACE,+BACE,gDACA,2BACE,uBAAKA,UAAU,WAAWG,MAAO,CAAEK,QAAS,eAAgBF,MAAO,QACjE,qBAAGL,KAAK,wCACN,uBAAKQ,IAAI,qDAGb,uBAAKT,UAAU,WAAWG,MAAO,CAAEK,QAAS,eAAgBF,MAAO,MAAOI,cAAe,QACvF,qBAAGT,KAAK,wCACN,uBAAKQ,IAAI,sDAIf,yBAAOT,UAAU,SAAjB,MAEE,2BAFF,uOASF,+BACE,iDACA,2BACE,uBAAKA,UAAU,WAAWG,MAAO,CAAEK,QAAS,eAAgBF,MAAO,QACjE,uBAAKG,IAAI,yDAEX,uBAAKT,UAAU,YACb,qBAAGC,KAAK,+CAAR,kBAGJ,yBAAOD,UAAU,SAAjB,iGAGE,2BAHF,MAKE,2BALF,wIAQE,2BARF,MAUE,2BAVF,yCAgBJ,+BACE,+BACE,oCAEF,+BACE,+BACA,yCAQL,IAAMW,EAAQ","file":"component---src-pages-presentation-7-tsx-493a43dd55aafc4559ff.js","sourcesContent":["import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\n\nimport PresentationLayout from '~/components/layout/Presentation';\nimport { PRESENTATION_DATA, removeTrailingSlash } from '~/configs/urls';\nimport { Query } from '~/gatsby-graphql-types';\n\nexport default function graphqlStartClient({ location: pLocation, data }: PageProps) {\n  const linkedinUrl = (data as Query).site!.siteMetadata!.social!.linkedin || undefined;\n\n  return (\n    <PresentationLayout title={PRESENTATION_DATA[removeTrailingSlash(pLocation.pathname)].title || ''}>\n      <div className=\"slides\">\n        <section>\n          <h2>GraphQL 시작하기 2</h2>\n          <h3>NHN Bugs</h3>\n          <p>\n            <small>\n              Created by{' '}\n              <a href={linkedinUrl} target=\"_blank\">\n                Junseok, Choi\n              </a>\n            </small>\n          </p>\n          <aside className=\"notes\">\n            Client GraphQL 시작하기 발표 시작하겠습니다. 이번 발표는 설명 위주 및 간단한 내용이었던 이전 발표와는 조금\n            다르게 예제 위주로 많이 다룰 예정입니다.\n          </aside>\n        </section>\n\n        <section>\n          <div>\n            <h2>순서</h2>\n            <ul style={{ listStyle: 'none', margin: '0' }}>\n              <li className=\"fragment\">1. About GraphQL</li>\n              <li className=\"fragment\">2. Example GraphQL</li>\n              <li className=\"fragment\">Q &amp; A</li>\n            </ul>\n          </div>\n        </section>\n\n        <section>\n          <h2>1. About GraphQL</h2>\n          <div style={{ width: '90%', margin: '0 auto' }}>\n            <div className=\"fragment\" style={{ fontSize: '40px' }}>\n              Client GraphQL은 필수가 아니다.\n            </div>\n            <div className=\"fragment\" style={{ fontSize: '40px' }}>\n              하지만 사용한다면?\n            </div>\n          </div>\n          <aside className=\"notes\">\n            1/2\n            <br />\n            클라이언트 GraphQL은 앞선 `Server GraphQL`에서도 말했지만 Client GraphQL은 필수가 아닙니다.\n            <br />\n            2/2\n            <br />\n            하지만, 사용한다면 시너지 효과가 나올 수 있고, Vuex에서 (React는 Redux에서) 데이터 관리를 따로 할 필요 없이\n            설정만 해주면 알아서 Server GraphQL과 연동이 됩니다.\n          </aside>\n        </section>\n\n        <section>\n          <section>\n            <h2>2. Example GraphQL</h2>\n            <div>\n              <div className=\"fragment\" style={{ display: 'inline-block', width: '35%' }}>\n                <a href=\"https://github.com/Akryum/vue-apollo\">\n                  <img src=\"/img/presentation/graphql-start/vue-supply.png\" />\n                </a>\n              </div>\n              <div className=\"fragment\" style={{ display: 'inline-block', width: '55%', verticalAlign: 'top' }}>\n                <a href=\"https://github.com/Akryum/vue-supply\">\n                  <img src=\"/img/presentation/graphql-start/vue-apollo.png\" />\n                </a>\n              </div>\n            </div>\n            <aside className=\"notes\">\n              2/2\n              <br />\n              Client GraphQL에서는 vue-apollo와 vue-supply 라이브러리를 사용할 예정입니다. vue-supply는 GraphQL에서\n              Vuex를 대체하는 용도로 사용합니다. 컴포넌트마다 가질 수 있는 props 데이터, 데이터를 주고받는 액션과 이를\n              적용하는 mutation 같은 기능을 하나로 통합하는 Vuex 대신, GraphQL에서 가져온 데이터를 직접 캐시하고, 이를\n              사용하게 해줍니다.\n            </aside>\n          </section>\n          <section>\n            <h2>Client GraphQL에 대해서</h2>\n            <div>\n              <div className=\"fragment\" style={{ display: 'inline-block', width: '40%' }}>\n                <img src=\"/img/presentation/graphql-start/apollo-provider.png\" />\n              </div>\n              <div className=\"fragment\">\n                <a href=\"https://github.com/Akryum/vueconf-2017-demo\">Demo project</a>\n              </div>\n            </div>\n            <aside className=\"notes\">\n              이 전 발표 자료에서 GraphQL에 대한 기본적인 설명은 모두 드렸습니다. typedef로의 타입 명시와 resolver로의\n              구현체를 만들어 적용하면 되는 것이었는데,\n              <br />\n              1/2\n              <br />\n              Client에서는 apollo-provider를 등록해 줘야 합니다. 이후엔 선택적으로 사용하는 vue-supply에 대해 vuex에\n              캐시를 입히는 부분, vuex의 액션 대신 서버와 데이터를 주고받을 쿼리문 등록 작업을 해주어야 합니다.\n              <br />\n              2/2\n              <br />\n              조금 더 자세한 내용에 대해서는 데모 프로젝트를 살펴보겠습니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h1>Q &amp; A</h1>\n          </section>\n          <section>\n            <h1>끝</h1>\n            <div>감사합니다.</div>\n          </section>\n        </section>\n      </div>\n    </PresentationLayout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        social {\n          linkedin\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}