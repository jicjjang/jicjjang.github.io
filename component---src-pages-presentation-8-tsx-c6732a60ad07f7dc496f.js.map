{"version":3,"sources":["webpack:///./src/configs/urls.ts","webpack:///./src/pages/presentation/8.tsx","webpack:///./src/components/layout/Presentation/index.tsx"],"names":["PAGE_URL","HOME","ARCHIVE","RESUME","PRESENTATION","PRESENTATION_1","PRESENTATION_2","PRESENTATION_3","PRESENTATION_4","PRESENTATION_5","PRESENTATION_6","PRESENTATION_7","PRESENTATION_8","PRESENTATION_9","PRESENTATION_DATA","path","title","date","tags","removeTrailingSlash","endsWith","slice","vueApolloGraphql","pLocation","location","siteUrl","data","site","siteMetadata","undefined","pathname","className","data-background","style","listStyle","margin","marginTop","href","target","fontSize","display","width","paddingLeft","paddingRight","marginLeft","verticalAlign","borderLeft","borderRight","src","data-fragment-index","textAlign","color","maxWidth","PresentationLayout","description","children","useState","isLoaded","setIsLoaded","find","isInitLoadedReveal","repeatEvent","setInterval","useCallback","window","Reveal","initLoadedReveal","isReady","console","log","clearInterval","initialize","dependencies","async","callback","hljs","initHighlightingOnLoad","minScale","maxScale","useEffect","layout","link","REVEAL_LIB","script","position","rel"],"mappings":"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","file":"component---src-pages-presentation-8-tsx-c6732a60ad07f7dc496f.js","sourcesContent":["export const PAGE_URL = {\n  HOME: '/',\n  ARCHIVE: '/archive',\n  RESUME: '/resume',\n  PRESENTATION: '/presentation',\n  PRESENTATION_1: '/presentation/1',\n  PRESENTATION_2: '/presentation/2',\n  PRESENTATION_3: '/presentation/3',\n  PRESENTATION_4: '/presentation/4',\n  PRESENTATION_5: '/presentation/5',\n  PRESENTATION_6: '/presentation/6',\n  PRESENTATION_7: '/presentation/7',\n  PRESENTATION_8: '/presentation/8',\n  PRESENTATION_9: '/presentation/9'\n};\n\nexport interface IPresentationData {\n  title: string;\n  path: string;\n  tags: string[];\n  date: string;\n}\nexport const PRESENTATION_DATA: IPresentationData[] = [\n  {\n    path: PAGE_URL.PRESENTATION_1,\n    title: 'React.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 23, 2016',\n    tags: ['react', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_2,\n    title: 'Vue.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Apr, 08, 2017',\n    tags: ['vue', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_3,\n    title: '현실적인 개발로 먹고살기',\n    date: 'July, 15, 2017',\n    tags: ['developer', 'kookmin', 'university']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_4,\n    title: 'How to use RxJs - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 30, 2017',\n    tags: ['rxjs', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_5,\n    title: 'Vue pwa 시작하기 - Vuetiful korea 3rd 발표자료',\n    date: 'Nov, 30, 2017',\n    tags: ['vue', 'pwa', 'vuetifulkorea', '3rd']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_6,\n    title: 'Graphql 시작하기 (server) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 05, 2018',\n    tags: ['graphql', 'server', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_7,\n    title: 'Graphql 시작하기 (client) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 06, 2018',\n    tags: ['graphql', 'client', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_8,\n    title: 'Apollo로 알아보는 Vue in the GraphQL - Vuetiful korea 4th 발표자료',\n    date: 'Apr, 16, 2018',\n    tags: ['vue', 'graphql', 'apollo', 'vuetifulkorea', '4th']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_9,\n    title: 'Vuetiful korea 5회 세미나 내용 정리',\n    date: 'Aug, 15, 2018',\n    tags: ['vue', 'vuetifulkorea', '5th']\n  }\n];\n\nexport const compareTrailingSlash = (prevUrl: string, nextUrl: string) =>\n  (prevUrl.endsWith('/') ? prevUrl.slice(0, -1) : prevUrl) === (nextUrl.endsWith('/') ? nextUrl.slice(0, -1) : nextUrl);\n\nexport const removeTrailingSlash = (path: string) => (path.endsWith('/') ? path.slice(0, -1) : path);\n","import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\n\nimport PresentationLayout from '~/components/layout/Presentation';\nimport { Query } from '~/gatsby-graphql-types';\n\nexport default function vueApolloGraphql({ location: pLocation, data }: PageProps) {\n  const siteUrl = (data as Query).site!.siteMetadata!.siteUrl! || undefined;\n\n  return (\n    <PresentationLayout pathname={pLocation.pathname}>\n      <div className=\"slides\">\n        <section data-background=\"/img/presentation/vue-apollo-graphql/vuetifulkorea4_background.png\">\n          <aside className=\"notes\">\n            안녕하세요. NHN벅스 최준석입니다. GraphQL, Apollo가 생소한 주제일 수 하지만 개발하면서 Slack 채널에 질문을\n            해도 이미 충분히 많은 분들이 사용해보셨고, 실무에 사용하시는 분도 있으셨습니다. GraphQL과 Apollo의 본질에\n            대한 설명이나 서버 파트에 대해서 설명을 드리겠습니다. 잘부탁드립니다.\n          </aside>\n        </section>\n\n        <section>\n          <div>\n            <h2>순서</h2>\n            <ul style={{ listStyle: 'none', margin: '0' }}>\n              <li className=\"fragment\">1. 왜 쓰는지 납득을 해야 쓰지</li>\n              <li className=\"fragment\">2. REST API를 GraphQL로</li>\n              <li className=\"fragment\">3. Client</li>\n              <li className=\"fragment\">4. 왜 이걸 써야하는거죠</li>\n              <li className=\"fragment\">Q &amp; A</li>\n            </ul>\n          </div>\n        </section>\n\n        <section>\n          <h2>들어가기전에</h2>\n          <div className=\"fragment\" style={{ marginTop: '20px' }}>\n            <a href={`${siteUrl}/slides/graphql-start-server`} target=\"_blank\">\n              기본적인 백엔드 내용은 이 링크를!\n            </a>\n          </div>\n          <div className=\"fragment\" style={{ marginTop: '20px' }}>\n            <a href={`${siteUrl}/slides/graphql-start-client`} target=\"_blank\">\n              기본적인 프론트 내용은 이 링크를!\n            </a>\n          </div>\n          <div className=\"fragment\" style={{ marginTop: '20px' }}>\n            <a href=\"https://github.com/seouldrinker/seoulDrinkerGraphql\" target=\"_blank\">\n              오늘의 코드는 이곳에\n              <br />\n              (https://github.com/seouldrinker/seoulDrinkerGraphql)!\n            </a>\n          </div>\n          <div className=\"fragment\" style={{ marginTop: '20px' }}>\n            더 자세한 내용은 구글링...! (내용은 백엔드 쪽에 거의 다 있어요 헤헤)\n          </div>\n          <aside className=\"notes\">\n            이미 한차례 사내 세미나를 했었고, 그때 자료도 있으니 발표 후에 한번 둘러봐주세요 :) 이 자료들과 겹치는\n            내용도 있겠지만, 이해를 돕기위해 추가하기도 했습니다.\n          </aside>\n        </section>\n\n        <section>\n          <section>\n            <h2>1. 왜 쓰는지 납득을 해야 쓰지</h2>\n            <div className=\"fragment\">그동안 잘쓰고 있던 API. 한계는??</div>\n            <ul className=\"fragment\" style={{ marginTop: '20px' }}>\n              <li>\n                플랫폼마다 조금씩 다른 쿼리,\n                <br />\n                그때 그때 원하는 데이터만 보고싶은데...\n              </li>\n              <li>\n                생각보다 편하다고 쓰고있었는데, 정형화된 규칙이 있을까?\n                <br />\n                (JSON이 규칙을 가지고 있진 않음)\n              </li>\n              <li>필터는? 정렬은?</li>\n              <li>페이지네이ㅅ....</li>\n              <li>읍읍</li>\n            </ul>\n            <aside className=\"notes\">\n              나름 편하다고 쓰고 있는 API는 깊게들어갈수록 생각보다 어렵습니다. 뭔가 규칙도 없고, 정렬, 필터, pagination\n              등등... 최종 선택은 본인과 팀의 결정이지만, 규칙이 없다는 건 리미터가 없다는 것이니 생각보다 위험합니다.\n              이런 문제들에 대해 일부라도 해결할 수 있다면 한번쯤 사용해 볼만 하겠죠.\n            </aside>\n          </section>\n          <section>\n            <h3>그렇다면 DB... DB를 보자!!</h3>\n            <div style={{ fontSize: '30px' }}>\n              <div\n                className=\"fragment\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  paddingLeft: '1%',\n                  paddingRight: '1%',\n                  marginLeft: '1%',\n                  verticalAlign: 'top',\n                  borderLeft: '1px solid #fff',\n                  borderRight: '1px solid #fff'\n                }}>\n                GraphQL에서 `RDB`가 나을까 `NoSQL`이 나을까?\n              </div>\n              <div\n                className=\"fragment\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  paddingLeft: '1%',\n                  paddingRight: '1%',\n                  marginLeft: '1%',\n                  verticalAlign: 'top',\n                  borderLeft: '1px solid #fff',\n                  borderRight: '1px solid #fff'\n                }}>\n                보통 DB에서 성능에 영향을 많이 주더라도 사용하게 되는 JOIN... 하지만 JOIN이 힘든 NoSql에서 쿼리가 급격히\n                늘어날수도...\n              </div>\n              <div\n                className=\"fragment\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  paddingLeft: '1%',\n                  paddingRight: '1%',\n                  marginLeft: '1%',\n                  verticalAlign: 'top',\n                  borderLeft: '1px solid #fff',\n                  borderRight: '1px solid #fff'\n                }}>\n                RDB가 나쁠 이유는 없는데?\n              </div>\n              <div\n                className=\"fragment\"\n                style={{\n                  display: 'inline-block',\n                  width: '20%',\n                  paddingLeft: '1%',\n                  paddingRight: '1%',\n                  marginLeft: '1%',\n                  verticalAlign: 'top',\n                  borderLeft: '1px solid #fff',\n                  borderRight: '1px solid #fff'\n                }}>\n                심지어 각각의 클라이언트에서 Depth에 대한 난이도 조절 가능...!\n              </div>\n            </div>\n            <aside className=\"notes\">\n              그렇다면 디비는 어떨까요? 회사 세미나의 예제 코드는 MongoDB로, NoSQL 환경이었습니다.\n              <br />\n              과도한 DB를 버텨야 하는 회사 업무에서는 어울리지 않아 보인다는 의견이 있었으나\n              <br />\n              RDB로 적용한 사용자들의 리뷰에서는 충분히 잘 사용하고 있다는 의견 또한 많았습니다.\n            </aside>\n          </section>\n          <section>\n            <h3>Depth 조절이 가능하다니 무슨 소리죠?</h3>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '30%' }}>\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code1.png\"\n              />\n            </div>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '30%', verticalAlign: 'top' }}>\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code2.png\"\n              />\n            </div>\n            <div\n              className=\"fragment\"\n              style={{ display: 'inline-block', width: '40%', marginTop: '60px', verticalAlign: 'top' }}>\n              이런 Recursive한 관계...\n              <br />\n              서비스를 하다보면 없을 순 없다 ㅠㅠ...\n            </div>\n            <aside className=\"notes\">\n              코드에 대해선 뒤에서 설명드리겠으니 여기선 Depth 조절만 알아봅시다.\n              <br />\n              이런 방식으로 GraphQL의 type들을 선언하는데, PK, FK 등<br />\n              다른 타입에 대한 의존성이 있을 수 있는데 이런 관계에 대해\n              <br />\n              어느 정도까지 연결 되게 할 것인지 정할 수 있다는 것입니다.\n            </aside>\n          </section>\n          <section>\n            <h2>GraphQL의 목표</h2>\n            <div style={{ width: '90%', margin: '0 auto' }}>\n              <span style={{ display: 'inline-block', width: '58%', margin: '5px', verticalAlign: 'top' }}>\n                <img\n                  className=\"fragment\"\n                  data-fragment-index=\"1\"\n                  src=\"/img/presentation/graphql-start/about1.jpg\"\n                  style={{ margin: '0 auto' }}\n                />\n                <div className=\"fragment\" style={{ marginTop: '20px', fontSize: '20px' }} data-fragment-index=\"3\">\n                  필요한 것만 정확히 물어볼 수있는 기능을 제공하며 시간이 지남에 따라 API를 쉽게 개발할 수 있도록...\n                </div>\n              </span>\n              <span style={{ display: 'inline-block', width: '38%', margin: '5px' }}>\n                <img\n                  className=\"fragment\"\n                  data-fragment-index=\"2\"\n                  src=\"/img/presentation/graphql-start/about2.jpg\"\n                  style={{ margin: '0 auto' }}\n                />\n                <div className=\"fragment\" style={{ marginTop: '20px', fontSize: '20px' }} data-fragment-index=\"4\">\n                  GraphQL은 단독 버전 관리를 통해 기존 코드 수정없이 보다 깨끗하고 유지보수가 쉽게 사용이 가능...\n                </div>\n              </span>\n            </div>\n            <aside className=\"notes\">\n              단편적인 내용들이지만, 규칙을 정하고 유지보수를 용의하게 하기 위해, 즉, GraphQL은\n              <br />\n              필요한 것만 물어보는 것으로\n              <br />\n              여러 플랫폼에 대해 단독 버전 관리를\n              <br />\n              하는 것이 목표입니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h2>2. REST API를 GraphQL로</h2>\n            <div>솔직히 한번쯤은 들어봤을 GraphQL. but, 노관심</div>\n            <br />\n            <div style={{ fontSize: '32px' }} className=\"fragment\">\n              <div style={{ display: 'inline-block', width: '50%', textAlign: 'center' }}>\n                <div>REST API</div>\n                <p>\n                  <span style={{ color: 'red' }}>URI</span> 중심으로 데이터의 CRUD 진행\n                </p>\n                <div style={{ width: '60%', maxWidth: '580px', margin: '0 auto', verticalAlign: 'top' }}>\n                  <img\n                    style={{ display: 'block', margin: '0 auto' }}\n                    src=\"/img/presentation/vue-apollo-graphql/query_api.png\"\n                  />\n                </div>\n              </div>\n              <div style={{ display: 'inline-block', width: '50%', textAlign: 'center', verticalAlign: 'top' }}>\n                <div>GraphQL</div>\n                <p>\n                  <span style={{ color: 'red' }}>Query</span>와 <span style={{ color: 'red' }}>Mutation</span>으로\n                  데이터의 CRUD를 진행\n                </p>\n                <div style={{ width: '60%', maxWidth: '580px', margin: '0 auto', verticalAlign: 'top' }}>\n                  <img\n                    style={{ display: 'block', margin: '0 auto' }}\n                    src=\"/img/presentation/vue-apollo-graphql/query_graphql.png\"\n                  />\n                </div>\n              </div>\n            </div>\n            <aside className=\"notes\">\n              이제 실제로 구현해봐야겠죠? backend의 endpoint에 대한 개발을 하지 않으시는 분들도 있으시겠지만, 서버\n              얘기를 하지 않을 수 없습니다 ㅠㅠ. 함께 적용을 하고 함께 변경해야 하니까요. REST와 GraphQL을 동시에 사용할\n              수도 있습니다.\n              <br />\n              ---\n              <br />\n              기존에 사용하던 API는 URI중심으로 데이터를 쿼리합니다. 그에 반해 GraphQL은 Query와 Mutation을 중심으로\n              데이터를 쿼리합니다. uri에 보이시는 대로 GraphQL은 `/graphql` 하나로 사용하는데, 이는 GraphQL의 권장사항\n              입니다.\n            </aside>\n          </section>\n          <section>\n            <h3>서버는 살짝만</h3>\n            <div className=\"fragment\" data-fragment-index=\"1\" style={{ fontSize: '32px' }}>\n              하기에는... 생각보단 쉬워요! (클라이언트보단)\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\" style={{ marginTop: '20px' }}>\n              <a href=\"https://github.com/seouldrinker/seoulDrinkerApi\" target=\"_blank\">\n                기존 API 코드\n              </a>\n              와\n              <a href=\"https://github.com/seouldrinker/seoulDrinkerGraphql\" target=\"_blank\">\n                GraphQL 코드\n              </a>\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\">\n              어떤 부분이 달라졌는지 확인해봅시다.\n            </div>\n            <aside className=\"notes\">\n              서버 코드는 Node고 매우 짧습니다. ppt 2장으로 끝나니 GraphQL에 대해 간단히 훑어보겠습니다.\n            </aside>\n          </section>\n          <section>\n            <h3>우선 라우팅부터</h3>\n            <div className=\"fragment\" style={{ fontSize: '32px' }}>\n              API에서 GraphQL로 경로가 바뀌었습니다.\n            </div>\n            <br />\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '60%' }}>\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code3.png\"\n              />\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code4.png\"\n              />\n            </div>\n            <div style={{ display: 'inline-block', width: '40%', verticalAlign: 'top' }}>\n              <div className=\"fragment\">graphql과 graphiql의 차이</div>\n              <div className=\"fragment\" style={{ margin: '20px auto 0 auto' }}>\n                <img\n                  style={{ display: 'block', margin: '0 auto' }}\n                  src=\"/img/presentation/vue-apollo-graphql/graphiql.png\"\n                />\n              </div>\n            </div>\n            <aside className=\"notes\">\n              라우팅 경로를 추가해줍니다. 위에서 `/graphql` 하나만 넣는게 권장사항이라 했으나, 2개가 들어가있는 이유는\n              디버깅 용도로 사용하는 graphiql 입니다. 이 또한 endpoint는 `/graphql`을 가리키고 있습니다.\n              <br />\n              ---\n              <br />\n              graphql 라우터는 schema를 받는데, schema는 typeDefs와 resolvers를 실행 가능하게 만든 모듈입니다.\n            </aside>\n          </section>\n          <section>\n            <h3>typedef와 resolver</h3>\n            <div className=\"fragment\" style={{ fontSize: '32px' }}>\n              정말 단순하게도, 이 파일 2개를 만들면 서버는 끝.\n            </div>\n            <br />\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%' }}>\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code5.png\"\n              />\n            </div>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%', verticalAlign: 'top' }}>\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code6.png\"\n              />\n              <img\n                style={{ display: 'inline-block', margin: '0 10px' }}\n                src=\"/img/presentation/vue-apollo-graphql/code7.png\"\n              />\n            </div>\n            <aside className=\"notes\">\n              이 두 파일만 더 살펴보면 끝입니다. 매우 간단하죠?\n              <br />\n              ---\n              <br />\n              우선 스트링 형태로 타입을 정의합니다. News라는 데이터를 위주로 보기 위해 정의해 놨습니다. 바로 아래\n              Query는 해당 타입의 리스트를 가져오겠다는 뜻입니다. 기술 해놓지는 않았지만 type Mutation 을 지정해서\n              데이터의 저장, 수정, 삭제를 할 수 있습니다. graphql에서는 조회만 Query, 나머진 Mutation 이거든요 ㅎㅎ\n              <br />\n              ---\n              <br />\n              resolvers에서는 정의된 내용을 구현합니다. News 타입에 대해 데이터 리스트를 가져올 내용은 getNewsList라는\n              함수인데요, 이 함수는 MongoDB 에서 데이터를 조회합니다. API에서 사용하던 모듈과 동일하고, 이 예제가 포함된\n              Repository에서 대부분이 API에서 사용하던 함수들을 재사용하며 포팅했습니다.\n              <br />\n              ---\n              <br />자 이렇게 서버에 대한 코드 설명이 끝났습니다. 처음 보시는데도 그다지 어렵지 않으셨을겁니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h2>3. Client</h2>\n            <div className=\"fragment\" data-fragment-index=\"1\" style={{ fontSize: '32px' }}>\n              클라이언트도 서버처럼\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\" style={{ marginTop: '20px' }}>\n              지난 3월 발표에서 보여드린{' '}\n              <a href=\"https://github.com/seouldrinker/seoulDrinkerPwa\" target=\"_blank\">\n                PWA 코드\n              </a>\n              의 api 호출을\n              <a href=\"https://github.com/seouldrinker/seoulDrinkerGraphql\" target=\"_blank\">\n                GraphQL\n              </a>\n              로\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\">\n              어떻게 바꾸는지 알아봅시다.\n            </div>\n            <aside className=\"notes\">이번엔 클라이언트 코드를 바꿔보겠습니다.</aside>\n          </section>\n          <section>\n            <h3>Vue 객체에 apollo provider 주입</h3>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-apollo-graphql/code8.png\" />\n            </div>\n            <div\n              className=\"fragment\"\n              style={{ display: 'inline-block', width: '50%', margin: '0 auto', verticalAlign: 'top' }}>\n              <div className=\"fragment\">\n                <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-apollo-graphql/code9.png\" />\n              </div>\n              <div className=\"fragment\" style={{ marginTop: '20px' }}>\n                provider는 공급자.\n                <br />\n                공급자가 하나일 필요는 없음\n                <br />\n                여러개로 늘려도? 상관 없음\n              </div>\n            </div>\n            <aside className=\"notes\">\n              vuex로 치면 store에 대한 설정이 끝난거죠.\n              <br />\n              리액트를 사용하셨던 분들은 provider가 조금 더 친절할 것 같네요.\n            </aside>\n          </section>\n          <section>\n            <h3>호출부에 대한 설정 완료! 이제는 SPC!</h3>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-apollo-graphql/code10.png\" />\n            </div>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%', verticalAlign: 'top' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-apollo-graphql/code11.png\" />\n            </div>\n            <aside className=\"notes\">\n              this.$apollo.~~~ 하는 방식으로도 사용할 수 있지만, 위 코드와 같은 방식으로 해야 smart query가 동작하여\n              data에 있는 newsList로 조회된 데이터가 자동 매핑됩니다.\n            </aside>\n          </section>\n          <section>\n            <h3>간단하게 설명했지만</h3>\n            <div className=\"fragment\" style={{ display: 'inline-block', width: '50%' }}>\n              <img style={{ margin: '0 10px' }} src=\"/img/presentation/vue-apollo-graphql/code12.png\" />\n            </div>\n            <div style={{ display: 'inline-block', width: '50%', verticalAlign: 'top' }}>\n              <div className=\"fragment\">1. 코드를 분리하려면 꼭 필요한 webpack loader 설정</div>\n              <div className=\"fragment\" style={{ marginTop: '30px' }}>\n                2. pub/sub 모델을 넣고 소켓으로 DB 변화를 `구독` 하려면 추가해야하는{' '}\n                <a href=\"https://github.com/apollographql/graphql-subscriptions\" target=\"_blank\">\n                  graphql-subscriptions\n                </a>\n              </div>\n              <div className=\"fragment\" style={{ marginTop: '30px' }}>\n                3. vuex에서 데이터 변화를 조금 더 쉽게 관찰할 수 있게 해줄{' '}\n                <a href=\"https://github.com/Akryum/vue-supply\" target=\"_blank\">\n                  vue-supply\n                </a>\n              </div>\n              <div className=\"fragment\" style={{ marginTop: '30px' }}>\n                4. 기타 등등 ....\n              </div>\n            </div>\n            <aside className=\"notes\">\n              설명은 간단했지만, 서비스에 넣을 정도의 스펙이 된다면 추가 및 수정해야할 것들이 약간 늘어납니다. DB 변화를\n              감지할 pub/sub 모델, vuex에 데이터 변화를 쉽게 연동할 수 있게 해줄 vue-supply 등등 신경쓸게 늘어납니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <section>\n            <h2>3. 단점에 대해</h2>\n            <div className=\"fragment\" data-fragment-index=\"1\">\n              사실 여기서부터가 나눠보고 싶은 얘기.\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\">\n              페이스북에서{' '}\n              <a href=\"https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/\" target=\"_blank\">\n                \"write once, run anywhere\"\n              </a>\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"2\">\n              이라는 이상에 맞추기 위해 만든게 GraphQL.\n            </div>\n            <div className=\"fragment\" data-fragment-index=\"3\">\n              안 쓸 이유가 있을까?\n            </div>\n            <aside className=\"notes\">\n              물론 안 쓸 이유가 없진 않습니다만, 생각보다 언어가 아닌 명세! graphql에 대한 관리가 열정적으로 이루어지진\n              않는 것이 대표적입니다.\n            </aside>\n          </section>\n          <section>\n            <h2>주관적인(겪어봤던) 리뷰</h2>\n            <div style={{ marginTop: '40px' }}>\n              <div\n                className=\"fragment\"\n                style={{ display: 'inline-block', width: '18%', margin: '1%', fontSize: '30px', verticalAlign: 'top' }}>\n                실제로 구현하는건 훨씬 복잡한 케이스가 다수\n              </div>\n              <div\n                className=\"fragment\"\n                style={{ display: 'inline-block', width: '18%', margin: '1%', fontSize: '30px', verticalAlign: 'top' }}>\n                에러 관리 (에러가 200으로 떨어지는 케이스)\n              </div>\n              <div\n                className=\"fragment\"\n                style={{ display: 'inline-block', width: '18%', margin: '1%', fontSize: '30px', verticalAlign: 'top' }}>\n                실패한 요청에 대한 재시도 (pub/sub으로 해결 가능함)\n              </div>\n              <div\n                className=\"fragment\"\n                style={{ display: 'inline-block', width: '18%', margin: '1%', fontSize: '30px', verticalAlign: 'top' }}>\n                하지만! 어느정도 잡혀있는 규칙에 대해선 매우 긍정적\n              </div>\n              <div\n                className=\"fragment\"\n                style={{ display: 'inline-block', width: '18%', margin: '1%', fontSize: '30px', verticalAlign: 'top' }}>\n                러닝커브는 모르겠지만, 한번 익숙해지면 rest보다 낫다고 생각할 수 밖에 없음\n              </div>\n            </div>\n            <aside className=\"notes\">\n              실제 구현시 난이도 상승, 에러가 가끔 200으로 나오는 케이스, 실패에 대한 재시도를 따로 제어하기 힘들다는 점\n              들이 있습니다.\n            </aside>\n          </section>\n          <section>\n            <h2>느낀 점 &amp; 드리고자 하는 말</h2>\n            <div className=\"fragment\">\n              대형 서비스를 기존 REST에서 GraphQL로 모두 바꾸기엔\n              <br />\n              조금은 이른게 아닐까 + 시작해볼만 하다\n              <br />\n              <b\n                style={{ display: 'block', marginTop: '40px', fontSize: '50px', color: '#efdcbc' }}\n                className=\"fragment\">\n                신규서비스라면 써보라 추천!!\n              </b>\n            </div>\n            <aside className=\"notes\">\n              facebook에서 graphql + react에 사용하는 relay를 거의 케어하지 않아서 apollo로 유저들이 많이 넘어오고\n              있었는데, relay의 업그레이드 버전이 나온다는 소식도 있습니다. 좋은 소식에도 불구하고 당장 큰 규모의\n              서비스를 쪼개긴 힘들겠지만, 모놀리스 서비스를 msa로 바꾸면서 도입해보기 좋다고 생각합니다.\n            </aside>\n          </section>\n        </section>\n\n        <section>\n          <h2>Q&amp;A</h2>\n        </section>\n\n        <section>\n          <h1>끝</h1>\n          <div>감사합니다.</div>\n        </section>\n      </div>\n    </PresentationLayout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport SEO from '~/components/SEO';\nimport { PRESENTATION_DATA, removeTrailingSlash } from '~/configs/urls';\n\ndeclare var Reveal: RevealStatic & {\n  isReady: () => boolean;\n};\ndeclare var window: Window & {\n  Reveal?: RevealStatic & {\n    isReady: () => boolean;\n  };\n};\n\ninterface IProps {\n  pathname: string;\n  description?: string;\n}\n\nconst PresentationLayout: React.FunctionComponent<React.PropsWithChildren<IProps>> = ({\n  pathname,\n  description,\n  children\n}) => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const data = PRESENTATION_DATA.find(data => data.path === removeTrailingSlash(pathname));\n\n  let isInitLoadedReveal = false;\n  const repeatEvent = setInterval(\n    useCallback(() => {\n      if (typeof window !== 'undefined') {\n        if (window.Reveal && !isInitLoadedReveal) {\n          initLoadedReveal();\n          isInitLoadedReveal = true;\n        }\n\n        if (window.Reveal && !isLoaded) {\n          if (window.Reveal.isReady()) {\n            console.log('ready');\n            clearInterval(repeatEvent);\n            setIsLoaded(true);\n          } else {\n            initLoadedReveal();\n          }\n        }\n      }\n    }, [isLoaded]),\n    300\n  );\n\n  const initLoadedReveal = () => {\n    Reveal.initialize({\n      dependencies: [\n        { src: '/js/presentation/notes.min.js', async: true },\n        {\n          src: '/js/presentation/highlight.min.js',\n          async: true,\n          callback: () => {\n            //@ts-ignore\n            hljs.initHighlightingOnLoad();\n          }\n        }\n      ],\n      minScale: 0.66,\n      maxScale: 0.66\n    });\n  };\n\n  useEffect(() => {\n    if (isLoaded) {\n      console.log('layout');\n      window.Reveal?.layout(); // display가 block이 된 다음 layout을 다시 해야함\n    }\n  }, [isLoaded]);\n\n  return (\n    <>\n      <SEO title={data?.title} description={description} link={REVEAL_LIB.link} script={REVEAL_LIB.script} />\n      <div className=\"reveal\" style={{ position: 'absolute', display: isLoaded ? 'block' : 'none' }}>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default PresentationLayout;\n\n/**\n * @description 스크립트를 히스토리 이동 시, 여러번 호출하는게 낭비같아서 window.Reveal이 있을 시 로드를 안하게 했더니 initialize나 layout을 다시 해도 화면이 안나옴\n */\nconst REVEAL_LIB = {\n  link: [\n    { rel: 'stylesheet', href: '/css/presentation/reveal.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/black.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/zenburn.min.css' }\n  ],\n  script: [\n    {\n      src: '/js/presentation/reveal.min.js'\n    },\n    {\n      src: '/js/presentation/head.min.js'\n    }\n  ]\n};\n"],"sourceRoot":""}