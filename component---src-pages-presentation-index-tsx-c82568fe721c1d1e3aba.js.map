{"version":3,"sources":["webpack:///./src/utils/speech.ts","webpack:///./src/pages/presentation/index.tsx","webpack:///./src/components/PostHeader.tsx"],"names":["Speech","isSupportedSpeech","SpeechSynthesisUtterance","speechSynthesis","console","error","window","onbeforeunload","stopSpeech","sendMessage","text","voiceIndex","this","speaking","cancel","message","rate","voices","getVoices","voice","speak","sendContentsMessage","postArticleElement","document","querySelector","innerText","Presentation","data","pLocation","location","presentations","allSitePage","edges","sort","a","b","parseInt","node","path","split","forEach","presentationData","removeTrailingSlash","log","push","PRESENTATION_DATA","title","pathname","length","map","index","tags","date","key","rhythm","StyledHeader","styled","header","props","StyledH1Link","Link","StyledSpeechSpan","span","StyledTime","time","scale","fontSize","lineHeight","PostHeader","isPost","to","onClick","speech","className","dateTime"],"mappings":"kGAAMA,E,WACJ,c,2BAEQC,kBAAR,WAA4B,WAC1B,MAAwC,oBAA7BC,0BAAuE,oBAApBC,iBAC5DC,QAAQC,MAAM,6CACP,IAGTC,OAAOC,eAAiB,kBAAM,EAAKC,eAE5B,I,EAGFC,YAAP,SAAmBC,EAAMC,GACvB,QADuC,IAAhBA,MAAa,GAChCC,KAAKX,oBAAqB,CACxBK,OAAOH,gBAAgBU,UACzBP,OAAOH,gBAAgBW,SAGzB,IAAMC,EAAU,IAAIb,yBAAyBQ,GAC7CK,EAAQC,KAAO,EACf,IAAMC,EAASd,gBAAgBe,YAE/BH,EAAQI,MAAQF,EAAON,GACvBR,gBAAgBiB,MAAML,K,EAInBM,oBAAP,WACE,IAAMC,EAAqBC,SAASC,cAAc,iBAC9CF,WAAoBG,WACtBb,KAAKH,YAAYa,aAAjB,EAAiBA,EAAoBG,Y,EAIlCjB,WAAP,WACMI,KAAKX,qBAAuBK,OAAOH,gBAAgBU,UACrDP,OAAOH,gBAAgBW,U,KAKd,QAAId,G,kCC3CnB,uIAae,SAAS0B,EAAT,GAAgE,IAAxCC,EAAwC,EAAxCA,KAAgBC,EAAwB,EAAlCC,SACrCC,EAAqC,GAY3C,OAXCH,EAAeI,YAAYC,MACzBC,MAAK,SAACC,EAAGC,GAAJ,OAAUC,SAASD,EAAEE,KAAKC,KAAKC,MAAM,KAAK,GAAI,IAAMH,SAASF,EAAEG,KAAKC,KAAKC,MAAM,KAAK,GAAI,OAC7FC,SAAQ,SAAAC,GACP,IAAMH,EAAOI,YAAoBD,EAAiBJ,KAAKC,MACvDlC,QAAQuC,IAAIL,GACZR,EAAcc,KAAd,iBACKC,IAAkBP,GADvB,CAEEA,aAKJ,gBAAC,IAAD,CAAeQ,MAhBL,eAgBmBC,SAAUnB,EAAUmB,UAC9CjB,EAAckB,OAAS,EACtBlB,EAAcmB,KAAI,WAAiDC,GAAjD,IAAGJ,EAAH,EAAGA,MAAOK,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,KAAMd,EAAtB,EAAsBA,KAAtB,OAChB,gBAAC,IAAD,CAAqBe,IAAQP,EAAL,IAAcI,EAASI,OAAQA,YAAO,IAC5D,gBAAC,IAAD,CAAYR,MAAOA,EAAQR,KAAMA,EAAMc,KAAMA,IAC5CD,WAAMH,OAAS,gBAAC,IAAD,CAAUG,KAAMA,IAAW,SAI/C,gBAAC,IAAD,CAAsBG,OAAQA,YAAO,IAArC,iB,oCCpCR,4EASMC,EAAeC,IAAOC,OAAV,8EAAGD,CAAH,wBACC,SAAAE,GAAK,OAAIA,EAAMJ,UAG5BK,EAAeH,YAAOI,KAAV,8EAAGJ,CAAH,wCAOZK,EAAmBL,IAAOM,KAAV,kFAAGN,CAAH,mNAahBO,EAAaP,IAAOQ,KAAV,4EAAGR,CAAH,kDAED,SAAAE,GAAK,OAAIA,EAAMO,MAAMC,YACnB,SAAAR,GAAK,OAAIA,EAAMO,MAAME,cA0BvBC,IAhBqC,SAAC,GAA0C,IAAxCtB,EAAwC,EAAxCA,MAAOR,EAAiC,EAAjCA,KAAMc,EAA2B,EAA3BA,KAA2B,IAArBiB,cAAqB,SAC7F,OACE,gBAACd,EAAD,CAAcD,OAAQA,YAAO,MAC3B,gBAAC,IAAD,CAAqBW,MAAOA,YAAM,IAAMX,OAAQA,YAAO,KACpDhB,EAAO,gBAACqB,EAAD,CAAcW,GAAIhC,GAAQQ,GAAwBA,EACzDuB,GAAU,gBAACR,EAAD,CAAkBU,QAAS,kBAAMC,IAAOnD,0BAErD,qBAAGoD,UAAU,aACX,gBAACV,EAAD,CAAYW,SAAUtB,EAAMa,MAAOA,aAAO,KACvCb","file":"component---src-pages-presentation-index-tsx-c82568fe721c1d1e3aba.js","sourcesContent":["class Speech {\n  constructor() {}\n\n  private isSupportedSpeech() {\n    if (typeof SpeechSynthesisUtterance === 'undefined' || typeof speechSynthesis === 'undefined') {\n      console.error('This browser does not support speech API');\n      return false;\n    }\n\n    window.onbeforeunload = () => this.stopSpeech();\n\n    return true;\n  }\n\n  public sendMessage(text, voiceIndex = 0) {\n    if (this.isSupportedSpeech()) {\n      if (window.speechSynthesis.speaking) {\n        window.speechSynthesis.cancel();\n      }\n\n      const message = new SpeechSynthesisUtterance(text);\n      message.rate = 1;\n      const voices = speechSynthesis.getVoices();\n\n      message.voice = voices[voiceIndex];\n      speechSynthesis.speak(message);\n    }\n  }\n\n  public sendContentsMessage() {\n    const postArticleElement = document.querySelector('.post_article') as HTMLElement;\n    if (postArticleElement?.innerText) {\n      this.sendMessage(postArticleElement?.innerText);\n    }\n  }\n\n  public stopSpeech() {\n    if (this.isSupportedSpeech() && window.speechSynthesis.speaking) {\n      window.speechSynthesis.cancel();\n    }\n  }\n}\n\nexport default new Speech();\n","import * as React from 'react';\nimport { PageProps, graphql } from 'gatsby';\n\nimport { Query } from '~/gatsby-graphql-types';\nimport DefaultLayout from '~/components/layout/Default';\nimport { removeTrailingSlash, PRESENTATION_DATA, IPresentationData } from '~/configs/urls';\nimport { StyledCommonArticle, StyledCommonDivEmpty } from '~/components/common';\nimport PostTags from '~/components/PostTags';\nimport PostHeader from '~/components/PostHeader';\nimport { rhythm } from '~/configs/typography';\n\nconst TITLE = 'Presentation';\n\nexport default function Presentation({ data, location: pLocation }: PageProps) {\n  const presentations: IPresentationData[] = [];\n  (data as Query).allSitePage.edges\n    .sort((a, b) => parseInt(b.node.path.split('/')[2], 10) - parseInt(a.node.path.split('/')[2], 10))\n    .forEach(presentationData => {\n      const path = removeTrailingSlash(presentationData.node.path);\n      console.log(path);\n      presentations.push({\n        ...PRESENTATION_DATA[path],\n        path\n      });\n    });\n\n  return (\n    <DefaultLayout title={TITLE} pathname={pLocation.pathname}>\n      {presentations.length > 0 ? (\n        presentations.map(({ title, tags, date, path }: IPresentationData, index: number) => (\n          <StyledCommonArticle key={`${title}-${index}`} rhythm={rhythm(2)}>\n            <PostHeader title={title!} path={path} date={date} />\n            {tags?.length ? <PostTags tags={tags} /> : null}\n          </StyledCommonArticle>\n        ))\n      ) : (\n        <StyledCommonDivEmpty rhythm={rhythm(4)}>컨텐츠가 없습니다.</StyledCommonDivEmpty>\n      )}\n    </DefaultLayout>\n  );\n}\n\nexport const query = graphql`\n  query {\n    allSitePage(filter: { path: { regex: \"/^\\/presentation\\/[\\\\w]/i\"}}) {\n      edges {\n        node {\n          id\n          path\n          matchPath\n        }\n      }\n    }\n  }\n`;\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\nimport { Link } from 'gatsby';\n\nimport { scale, rhythm } from '~/configs/typography';\nimport { StyledCommonH1Title } from '~/components/common';\nimport speech from '~/utils/speech';\n\nconst StyledHeader = styled.header<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledH1Link = styled(Link)`\n  color: #000;\n  &:hover {\n    color: #172fde;\n  }\n`;\n\nconst StyledSpeechSpan = styled.span`\n  display: inline-block;\n  width: 30px;\n  height: 30px;\n  background-image: url(/img/post/speaker.png);\n  background-size: 22px;\n  background-repeat: no-repeat;\n  background-position: 6px 10px;\n  &:active {\n    background-position: 6px 11px;\n  }\n`;\n\nconst StyledTime = styled.time<{ scale: BaseLine }>`\n  color: #898989;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n`;\n\ninterface IProps {\n  title: string;\n  path?: string;\n  date: string;\n  isPost?: boolean;\n}\n\nconst PostHeader: React.FunctionComponent<IProps> = ({ title, path, date, isPost = false }) => {\n  return (\n    <StyledHeader rhythm={rhythm(1.2)}>\n      <StyledCommonH1Title scale={scale(0.5)} rhythm={rhythm(0.2)}>\n        {path ? <StyledH1Link to={path!}>{title}</StyledH1Link> : title}\n        {isPost && <StyledSpeechSpan onClick={() => speech.sendContentsMessage()} />}\n      </StyledCommonH1Title>\n      <p className=\"post-meta\">\n        <StyledTime dateTime={date} scale={scale(-0.1)}>\n          {date}\n        </StyledTime>\n      </p>\n    </StyledHeader>\n  );\n};\n\nexport default PostHeader;\n"],"sourceRoot":""}