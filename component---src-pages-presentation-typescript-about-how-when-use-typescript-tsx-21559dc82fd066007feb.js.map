{"version":3,"sources":["webpack:///./src/configs/urls.ts","webpack:///./src/pages/presentation/typescript/about/how-when-use-typescript.tsx","webpack:///./src/components/layout/Presentation/index.tsx"],"names":["PAGE_URL","HOME","ARCHIVE","RESUME","PRESENTATION","PRESENTATION_1","PRESENTATION_2","PRESENTATION_3","PRESENTATION_4","PRESENTATION_5","PRESENTATION_6","PRESENTATION_7","PRESENTATION_8","PRESENTATION_9","PRESENTATION_TYPESCRIPT__OT","PRESENTATION_TYPESCRIPT__WHY_USE_TYPESCRIPT","PRESENTATION_TYPESCRIPT__WORRIES_OF_USERS_WHO_DO_NOT_USE_TYPESCRIPT","PRESENTATION_TYPESCRIPT__HOW_WHEN_USE_TYPESCRIPT","PRESENTATION_DATA","path","title","date","tags","removeTrailingSlash","endsWith","slice","typescriptAboutHowWhenUseTypescript","pLocation","location","pathname","className","src","alt","style","width","margin","background","border","href","PresentationLayout","description","children","useState","isLoaded","setIsLoaded","data","find","isInitLoadedReveal","repeatEvent","setInterval","useCallback","window","Reveal","initLoadedReveal","isReady","console","log","clearInterval","initialize","dependencies","async","callback","hljs","initHighlightingOnLoad","minScale","maxScale","useEffect","layout","link","REVEAL_LIB","script","position","display","rel"],"mappings":"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","file":"component---src-pages-presentation-typescript-about-how-when-use-typescript-tsx-21559dc82fd066007feb.js","sourcesContent":["export const PAGE_URL = {\n  HOME: '/',\n  ARCHIVE: '/archive',\n  RESUME: '/resume',\n  PRESENTATION: '/presentation',\n  PRESENTATION_1: '/presentation/1',\n  PRESENTATION_2: '/presentation/2',\n  PRESENTATION_3: '/presentation/3',\n  PRESENTATION_4: '/presentation/4',\n  PRESENTATION_5: '/presentation/5',\n  PRESENTATION_6: '/presentation/6',\n  PRESENTATION_7: '/presentation/7',\n  PRESENTATION_8: '/presentation/8',\n  PRESENTATION_9: '/presentation/9',\n  PRESENTATION_TYPESCRIPT__OT: '/presentation/typescript/ot',\n  PRESENTATION_TYPESCRIPT__WHY_USE_TYPESCRIPT: '/presentation/typescript/about/why-use-typescript',\n  PRESENTATION_TYPESCRIPT__WORRIES_OF_USERS_WHO_DO_NOT_USE_TYPESCRIPT:\n    '/presentation/typescript/about/worries-of-users-who-do-not-use-typescript',\n  PRESENTATION_TYPESCRIPT__HOW_WHEN_USE_TYPESCRIPT: '/presentation/typescript/about/how-when-use-typescript'\n};\n\nexport interface IPresentationData {\n  title: string;\n  path: string;\n  tags: string[];\n  date: string;\n}\nexport const PRESENTATION_DATA: IPresentationData[] = [\n  {\n    path: PAGE_URL.PRESENTATION_1,\n    title: 'React.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 23, 2016',\n    tags: ['react', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_2,\n    title: 'Vue.js basic - NHN벅스 팀 세미나 발표 자료',\n    date: 'Apr, 08, 2017',\n    tags: ['vue', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_3,\n    title: '현실적인 개발로 먹고살기',\n    date: 'July, 15, 2017',\n    tags: ['developer', 'kookmin', 'university']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_4,\n    title: 'How to use RxJs - NHN벅스 팀 세미나 발표 자료',\n    date: 'Nov, 30, 2017',\n    tags: ['rxjs', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_5,\n    title: 'Vue pwa 시작하기 - Vuetiful korea 3rd 발표자료',\n    date: 'Nov, 30, 2017',\n    tags: ['vue', 'pwa', 'vuetifulkorea', '3rd']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_6,\n    title: 'Graphql 시작하기 (server) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 05, 2018',\n    tags: ['graphql', 'server', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_7,\n    title: 'Graphql 시작하기 (client) - NHN벅스 팀 세미나 발표 자료',\n    date: 'Mar, 06, 2018',\n    tags: ['graphql', 'client', 'nhn', 'bugs']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_8,\n    title: 'Apollo로 알아보는 Vue in the GraphQL - Vuetiful korea 4th 발표자료',\n    date: 'Apr, 16, 2018',\n    tags: ['vue', 'graphql', 'apollo', 'vuetifulkorea', '4th']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_9,\n    title: 'Vuetiful korea 5회 세미나 내용 정리',\n    date: 'Aug, 15, 2018',\n    tags: ['vue', 'vuetifulkorea', '5th']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_TYPESCRIPT__OT,\n    title: '기초부터 시작하는 typescript 강의 - ot',\n    date: 'Feb, 01, 2023',\n    tags: ['typescript', 'inflearn', 'ot']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_TYPESCRIPT__WHY_USE_TYPESCRIPT,\n    title: '기초부터 시작하는 typescript 강의 - 타입스크립트란? - 타입스크립트를 꼭 배워야 하나요?',\n    date: 'Feb, 02, 2023',\n    tags: ['typescript', 'inflearn', 'about', 'why use typescript']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_TYPESCRIPT__WORRIES_OF_USERS_WHO_DO_NOT_USE_TYPESCRIPT,\n    title: '기초부터 시작하는 typescript 강의 - 타입스크립트란? - 타입스크립트를 사용하지 않는 유저들의 걱정',\n    date: 'Feb, 03, 2023',\n    tags: ['typescript', 'inflearn', 'about', 'worries of users who do not use typescript']\n  },\n  {\n    path: PAGE_URL.PRESENTATION_TYPESCRIPT__HOW_WHEN_USE_TYPESCRIPT,\n    title: '기초부터 시작하는 typescript 강의 - 타입스크립트란? - 언제, 어떻게 사용할 수 있나요?',\n    date: 'Feb, 04, 2023',\n    tags: ['typescript', 'inflearn', 'about', 'how, when use typescript']\n  }\n];\n\nexport const compareTrailingSlash = (prevUrl: string, nextUrl: string) =>\n  (prevUrl.endsWith('/') ? prevUrl.slice(0, -1) : prevUrl) === (nextUrl.endsWith('/') ? nextUrl.slice(0, -1) : nextUrl);\n\nexport const removeTrailingSlash = (path: string) => (path.endsWith('/') ? path.slice(0, -1) : path);\n","import * as React from 'react';\nimport { PageProps } from 'gatsby';\n\nimport PresentationLayout from '~/components/layout/Presentation';\n\nexport default function typescriptAboutHowWhenUseTypescript({ location: pLocation }: PageProps) {\n  return (\n    <PresentationLayout pathname={pLocation.pathname}>\n      <div className=\"slides\">\n        <section>\n          <div>\n            <img\n              src=\"/img/presentation/typescript/logo.png\"\n              alt=\"logo\"\n              style={{ width: '50%', margin: '0 auto', background: 'none', border: 'none' }}\n            />\n            <p style={{ margin: '20px 0 0 0' }}>기초부터 시작하는 타입스크립트 강의</p>\n            <p style={{ margin: '20px 0 0 0' }}>타입스크립트란? - 언제, 어떻게 사용할 수 있나요?</p>\n          </div>\n          <aside className=\"notes\"></aside>\n        </section>\n\n        <section>\n          <div>\n            <h2>바닐라 자바스크립트</h2>\n            <div style={{ width: '80%', margin: '0 auto' }}>\n              <img src=\"/img/presentation/typescript/about/how-when-use-typescript/vanila-code.jpg\" />\n            </div>\n\n            <div style={{ width: '80%', margin: '0 auto' }}>\n              <img src=\"/img/presentation/typescript/about/how-when-use-typescript/vanila-babel-result.jpg\" />\n            </div>\n\n            <div style={{ width: '80%', margin: '0 auto' }}>\n              <img src=\"/img/presentation/typescript/about/how-when-use-typescript/vanila-tsc-result.jpg\" />\n            </div>\n            <aside className=\"notes\">\n              타입스크립트는 어떠한 자바스크립트 환경에서도 사용할 수 있습니다. 브라우저, node, deno 상관 없습니다.\n              <br />\n              설정 또한 babel, webpack, vite, parcel 등 여러 트랜스파일러(transpiler), 번들러(bundler)를 통해 원하는\n              방식으로 사용할 수 있습니다. 기본적인 바닐라 자바스크립트 환경에서 사용하는 부분부터 확인해보겠습니다.\n              <br />\n              --코드--\n              <br />\n              위와 같은 코드는 document에 접근하기 때문에 브라우저에서 실행될 코드임을 바로 알 수 있습니다.\n              applicationHtml에 string 타입이 붙어있기 때문 타입스크립트 코드란 것도 알 수 있죠. 타입스크립트를 우리가\n              말하는 프론트엔드 환경에서 실행하려면 어떤 순서를 거쳐야 할까요?\n              <br />\n              1. 타입스크립트 코드를 자바스크립트 코드로 변환하고\n              <br />\n              2. 해당 자바스크립트파일을 사용하는 html파일을 서버의 end point로 두고\n              <br />\n              3. 해당 서버에서 request를 받으면 해당 endpoint로 들어오도록 받아줘야 합니다.\n              <br />\n              1번 타입스크립트 코드를 자바스크립트 코드로 변환을 하는 방법은 babel과 tsc가 있습니다. 동일한 간단한\n              코드도 방법에 따라 결과가 아래와 같이 상이하게 나타나는 것을 볼 수 있습니다. 실제 프로젝트에서 CRA나\n              Tsdx(https://www.npmjs.com/package/tsdx)와 같은 bootstraping 도구를 사용하지 않는다면 이러한 방법 중\n              자신에게 맞는 방법을 찾아 직접 설정해줘야 합니다.\n            </aside>\n          </div>\n        </section>\n\n        <section>\n          <div>\n            <h2>Node.js</h2>\n            <div>\n              <img src=\"/img/presentation/typescript/about/how-when-use-typescript/node-code.jpg\" />\n            </div>\n\n            <aside className=\"notes\">\n              Node.js에서도 복잡한 코드가 아니며, 자바스크립트와 동일한 문법으로 사용 가능합니다.\n              <br />\n              --코드--\n              <br />\n              여기서는 babel과 tsc의 차이를 볼 수 있습니다. \".split\" 문법을 사용하여 string array가 나오는 결과에 type이\n              number array로 들어가 있습니다. 에러가 나야 하는 상황에 babel은 compile이 성공하고 tsc는 실패합니다.\n              <br />\n              도구의 차이는 있지만, 실행 자체는 Node.js에서도 문제가 없습니다. 간단히 말씀드리면 babel은 에러 체크 없이\n              compile을 하고, tsc는 에러 체크와 compile을 함께하기 때문입니다. 그렇다고 무조건 tsc를 써야한다면 babel의\n              typescript 기능은 존재하지 않았겠죠. 자세한 내용은 뒤에서 같이 확인해봅시다.\n            </aside>\n          </div>\n        </section>\n\n        <section>\n          <div>\n            <h2>Deno</h2>\n            <div>\n              <a href=\"https://www.youtube.com/watch?v=M3BM9TB-8yA\">Node.js에 관한 10가지 후회</a>\n            </div>\n            <div>\n              <a href=\"https://github.com/denoland/deno\">Deno 프로젝트</a>\n            </div>\n\n            <aside className=\"notes\">\n              Deno라는 툴이 생소하신 분들이 많으실 겁니다. Deno는 Node.js를 창시한 라이언달이 만든 javascript +\n              typescript run-time 환경입니다. \"Node.js에 관한 10가지 후회\" 발표 후 새로이 만드는 \"Deno\" 라는 프로젝트를\n              공개했습니다.\n              <br />\n              javascript는 동적 타입 언어 , typescript는 정적 타입 도구인데 이 둘 모두 run-time 환경에서 실행할 수\n              있도록 만들은 것입니다. 그렇기 때문에 Deno 환경에서 파일 실행은 별다른 환경 설정 없이 .ts파일을 실행할 수\n              있습니다.\n            </aside>\n          </div>\n        </section>\n\n        <section>\n          <h1>끝</h1>\n          <div>감사합니다.</div>\n          <aside className=\"notes\">\n            이렇게 여러 환경에서 typescript가 모두 사용될 수 있음을 확인해봤습니다. 어떠셨나요? 조금은 설레지\n            않으신가요? 프론트 개발자도, 서버 개발자도, 자바스크립트를 쓰는 모든 환경에서 타입스크립트를 적용할 수\n            있습니다. 이제 다음 강의부터 본격적으로 학습을 시작해보겠습니다. 감사합니다.\n          </aside>\n        </section>\n      </div>\n    </PresentationLayout>\n  );\n}\n","import * as React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\n\nimport SEO from '~/components/SEO';\nimport { PRESENTATION_DATA, removeTrailingSlash } from '~/configs/urls';\n\ndeclare var Reveal: RevealStatic & {\n  isReady: () => boolean;\n};\ndeclare var window: Window & {\n  Reveal?: RevealStatic & {\n    isReady: () => boolean;\n  };\n};\n\ninterface IProps {\n  pathname: string;\n  description?: string;\n}\n\nconst PresentationLayout: React.FunctionComponent<React.PropsWithChildren<IProps>> = ({\n  pathname,\n  description,\n  children\n}) => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n  const data = PRESENTATION_DATA.find(data => data.path === removeTrailingSlash(pathname));\n\n  let isInitLoadedReveal = false;\n  const repeatEvent = setInterval(\n    useCallback(() => {\n      if (typeof window !== 'undefined') {\n        if (window.Reveal && !isInitLoadedReveal) {\n          initLoadedReveal();\n          isInitLoadedReveal = true;\n        }\n\n        if (window.Reveal && !isLoaded) {\n          if (window.Reveal.isReady()) {\n            console.log('ready');\n            clearInterval(repeatEvent);\n            setIsLoaded(true);\n          } else {\n            initLoadedReveal();\n          }\n        }\n      }\n    }, [isLoaded]),\n    300\n  );\n\n  const initLoadedReveal = () => {\n    Reveal.initialize({\n      dependencies: [\n        { src: '/js/presentation/notes.min.js', async: true },\n        {\n          src: '/js/presentation/highlight.min.js',\n          async: true,\n          callback: () => {\n            //@ts-ignore\n            hljs.initHighlightingOnLoad();\n          }\n        }\n      ],\n      minScale: 0.66,\n      maxScale: 0.66\n    });\n  };\n\n  useEffect(() => {\n    if (isLoaded) {\n      console.log('layout');\n      window.Reveal?.layout(); // display가 block이 된 다음 layout을 다시 해야함\n    }\n  }, [isLoaded]);\n\n  return (\n    <>\n      <SEO title={data?.title} description={description} link={REVEAL_LIB.link} script={REVEAL_LIB.script} />\n      <div className=\"reveal\" style={{ position: 'absolute', display: isLoaded ? 'block' : 'none' }}>\n        {children}\n      </div>\n    </>\n  );\n};\n\nexport default PresentationLayout;\n\n/**\n * @description 스크립트를 히스토리 이동 시, 여러번 호출하는게 낭비같아서 window.Reveal이 있을 시 로드를 안하게 했더니 initialize나 layout을 다시 해도 화면이 안나옴\n */\nconst REVEAL_LIB = {\n  link: [\n    { rel: 'stylesheet', href: '/css/presentation/reveal.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/black.min.css' },\n    { rel: 'stylesheet', href: '/css/presentation/zenburn.min.css' }\n  ],\n  script: [\n    {\n      src: '/js/presentation/reveal.min.js'\n    },\n    {\n      src: '/js/presentation/head.min.js'\n    }\n  ]\n};\n"],"sourceRoot":""}