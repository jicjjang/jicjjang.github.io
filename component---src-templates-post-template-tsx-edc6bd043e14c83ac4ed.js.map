{"version":3,"sources":["webpack:///./src/components/PostHeader.tsx","webpack:///./src/utils/comments.ts","webpack:///./src/templates/PostTemplate.tsx"],"names":["StyledHeader","styled","header","props","rhythm","StyledH1Link","Link","StyledTime","time","scale","fontSize","lineHeight","PostHeader","title","path","date","to","className","dateTime","removeComments","document","utterancesElement","querySelector","remove","PostTemplate","data","utterancElement","createElement","setAttribute","body","appendChild","addComments","useEffect","site","markdownRemark","frontmatter","tags","excerpt","html","Default","siteMetadata","description","dangerouslySetInnerHTML","__html","style","marginBottom","color","length","PostTags","display","flexWrap","justifyContent","listStyle","padding","query"],"mappings":"6FAAA,gEAQMA,EAAeC,IAAOC,OAAV,8EAAGD,CAAH,wBACC,SAAAE,GAAK,OAAIA,EAAMC,UAG5BC,EAAeJ,YAAOK,KAAV,8EAAGL,CAAH,wCAOZM,EAAaN,IAAOO,KAAV,4EAAGP,CAAH,kDAED,SAAAE,GAAK,OAAIA,EAAMM,MAAMC,YACnB,SAAAP,GAAK,OAAIA,EAAMM,MAAME,cAwBvBC,IAfuB,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpD,OACE,gBAACf,EAAD,CAAcI,OAAQA,YAAO,MAC3B,gBAAC,IAAD,CAAqBK,MAAOA,YAAM,IAAML,OAAQA,YAAO,KACpDU,EAAO,gBAACT,EAAD,CAAcW,GAAIF,GAAQD,GAAwBA,GAE5D,qBAAGI,UAAU,aACX,gBAACV,EAAD,CAAYW,SAAUH,EAAMN,MAAOA,aAAO,KACvCM,O,2GCzBEI,EAAiB,WAC5B,GAAwB,oBAAbC,SAA0B,CACnC,IAAMC,EAAoBD,SAASE,cAAc,eAC7CD,GAAqBD,SAASE,cAAc,sBAC9CD,EAAkBE,WClBxB,sCA0FeC,UA9D4B,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAI5CN,IDhCyB,WACzB,GAAwB,oBAAbC,SAA0B,CACnC,IAAMM,EAAkBN,SAASO,cAAc,UAC/CD,EAAgBE,aAAa,MAAO,iCACpCF,EAAgBE,aAAa,OAAQ,+BACrCF,EAAgBE,aAAa,aAAc,YAC3CF,EAAgBE,aAAa,QAAS,QACtCF,EAAgBE,aAAa,QAAS,gBACtCF,EAAgBE,aAAa,QAAS,QAEtCR,SAASS,KAAKC,YAAYJ,ICuB5BK,GAEAC,qBAAU,WACR,OAAO,kBAAMb,OACZ,IAToD,MAWtBM,EAAzBQ,EAX+C,EAW/CA,KAAMC,EAXyC,EAWzCA,eAXyC,EAgBnDA,EAHFC,YAAetB,EAbsC,EAatCA,MAAOE,EAb+B,EAa/BA,KAAMqB,EAbyB,EAazBA,KAC5BC,EAEEH,EAFFG,QACAC,EACEJ,EADFI,KAIF,OACE,gBAACC,EAAA,EAAD,CAAe1B,MAAOoB,EAAKO,aAAa3B,MAAO4B,YAAaJ,GAC1D,+BACE,gBAACzB,EAAA,EAAD,CAAYC,MAAOA,EAAQE,KAAMA,IACjC,2BAAS2B,wBAAyB,CAAEC,OAAQL,KAC5C,sBACEM,MAAO,CACLC,aAAczC,YAAO,MAGzB,0BAAQwC,MAAO,CAAEE,MAAO,aAAcV,aAAA,EAAAA,EAAMW,SAAU,gBAACC,EAAA,EAAD,CAAUZ,KAAMA,MAGxE,2BACE,sBACEQ,MAAO,CACLK,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,QAvCrB,IAgEaC,EAAQ","file":"component---src-templates-post-template-tsx-edc6bd043e14c83ac4ed.js","sourcesContent":["import * as React from 'react';\nimport styled from 'styled-components';\nimport { BaseLine } from 'typography';\nimport { Link } from 'gatsby';\n\nimport { scale, rhythm } from '~/configs/typography';\nimport { StyledCommonH1Title } from '~/components/common';\n\nconst StyledHeader = styled.header<{ rhythm: string }>`\n  margin-bottom: ${props => props.rhythm};\n`;\n\nconst StyledH1Link = styled(Link)`\n  color: #000;\n  &:hover {\n    color: #172fde;\n  }\n`;\n\nconst StyledTime = styled.time<{ scale: BaseLine }>`\n  color: #898989;\n  font-size: ${props => props.scale.fontSize};\n  line-height: ${props => props.scale.lineHeight};\n`;\n\ninterface IProps {\n  title: string;\n  path?: string;\n  date: string;\n}\n\nconst PostHeader: React.SFC<IProps> = ({ title, path, date }) => {\n  return (\n    <StyledHeader rhythm={rhythm(1.2)}>\n      <StyledCommonH1Title scale={scale(0.5)} rhythm={rhythm(0.2)}>\n        {path ? <StyledH1Link to={path!}>{title}</StyledH1Link> : title}\n      </StyledCommonH1Title>\n      <p className=\"post-meta\">\n        <StyledTime dateTime={date} scale={scale(-0.1)}>\n          {date}\n        </StyledTime>\n      </p>\n    </StyledHeader>\n  );\n};\n\nexport default PostHeader;\n","export const addComments = () => {\n  if (typeof document !== 'undefined') {\n    const utterancElement = document.createElement('script');\n    utterancElement.setAttribute('src', 'https://utteranc.es/client.js');\n    utterancElement.setAttribute('repo', 'jicjjang/jicjjang.github.io');\n    utterancElement.setAttribute('issue-term', 'pathname');\n    utterancElement.setAttribute('label', '✨댓글✨');\n    utterancElement.setAttribute('theme', 'github-light');\n    utterancElement.setAttribute('async', 'true');\n\n    document.body.appendChild(utterancElement);\n  }\n};\n\nexport const removeComments = () => {\n  if (typeof document !== 'undefined') {\n    const utterancesElement = document.querySelector('.utterances');\n    if (utterancesElement && document.querySelector('.utterances-frame')) {\n      utterancesElement.remove();\n    }\n  }\n};\n","import * as React from 'react';\nimport { useEffect } from 'react';\nimport {\n  // Link,\n  graphql,\n  PageProps\n} from 'gatsby';\n\nimport DefaultLayout from '~/components/layout/Default';\nimport { rhythm } from '~/configs/typography';\nimport { IQuerySiteData } from '~/interface';\nimport PostHeader from '~/components/PostHeader';\nimport PostTags from '~/components/PostTags';\nimport { addComments, removeComments } from '~/utils/comments';\n\ninterface IQuerydMarkdownData {\n  markdownRemark: {\n    id: string;\n    excerpt: string;\n    html: string;\n    frontmatter: {\n      title: string;\n      date: string;\n      tags: string[];\n    };\n  };\n}\n\nconst PostTemplate: React.SFC<PageProps> = ({ data }) => {\n  /**\n   * @description 댓글 라이브러리를 post에만 추가, unmount에서 제거!\n   */\n  removeComments();\n  addComments();\n\n  useEffect(() => {\n    return () => removeComments();\n  }, []);\n\n  const { site, markdownRemark } = data as IQuerySiteData<{ title: string }> & IQuerydMarkdownData;\n  const {\n    frontmatter: { title, date, tags },\n    excerpt,\n    html\n  } = markdownRemark;\n  // const { previous, next } = pageContext;\n\n  return (\n    <DefaultLayout title={site.siteMetadata.title} description={excerpt}>\n      <article>\n        <PostHeader title={title!} date={date} />\n        <section dangerouslySetInnerHTML={{ __html: html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1)\n          }}\n        />\n        <footer style={{ color: '#898989' }}>{tags?.length && <PostTags tags={tags} />}</footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}>\n          {/* @TODO 이전, 이후 포스팅 추가하기 */}\n          {/* <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li> */}\n        </ul>\n      </nav>\n    </DefaultLayout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        tags\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}