{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/review-think-data-structures","result":{"data":{"site":{"siteMetadata":{"title":"June"}},"markdownRemark":{"id":"06739b09-c4ae-5fb9-bbcf-cfea178be465","excerpt":"7월 한빛미디어  도서에 대한 리뷰를 해보겠습니다.\n한빛미디어를 통해 매번 도서 리뷰를 진행하는데... 정시를 맞춘적이 거의 없는 것 같습니다...\n(그래도 계속 뽑아주셔서 감사해요 ㅠㅠ 열심히 하겠습니다...) 이번 리뷰에서는 제가 주로 개발하는 Node나 Javascript…","html":"<p>7월 한빛미디어 <code class=\"language-text\">[Think data structures]</code> 도서에 대한 리뷰를 해보겠습니다.\n한빛미디어를 통해 매번 도서 리뷰를 진행하는데... 정시를 맞춘적이 거의 없는 것 같습니다...\n(그래도 계속 뽑아주셔서 감사해요 ㅠㅠ 열심히 하겠습니다...)</p>\n<p>이번 리뷰에서는 제가 주로 개발하는 Node나 Javascript에 관련된 책이 없었기 때문에,\n회사 백엔드 스택으로 들어가 있는 자바에 대한 책으로 리뷰를 진행하기로 결정하고 신청했습니다.</p>\n<p><code class=\"language-text\">Think data structures 도서</code>에 대한 리뷰! 시작하겠습니다.</p>\n<hr>\n<p>200p가 되지 않는 얇은 책이기 때문에 부담없이 읽을 수 있는 책입니다. 물론 한 언어의\n알고리즘이란 주제로 200p라면 모든 내용을 담지 못하기 때문에, 중요한 내용들을\n잘 응축해 놓았겠죠?! 그 중에서도 중요하거나 괜찮은 내용이 들은 챕터를 위주로\n리뷰를 해보겠습니다.</p>\n<h2 id=\"Chap-1-인터페이스\" style=\"position:relative;\">Chap. 1 인터페이스<a href=\"#Chap-1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"Chap 1 인터페이스 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>알고리즘에 대한 자세한 설명 전, List와 List를 implements한 ArrayList, LinkedList를 가지고\nCasting에 대한 매우 간략한 (주로 Downcasting 에 대한)설명이 나옵니다. 인터페이스를 <code class=\"language-text\">왜</code> 쓰는지\n아는건 중요한 일이죠.</p>\n<h2 id=\"Chap-3-ArrayList-클래스\" style=\"position:relative;\">Chap. 3 ArrayList 클래스<a href=\"#Chap-3-ArrayList-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"Chap 3 ArrayList 클래스 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>제목은 ArrayList지만, ArrayList의 구성 요소들 (get, equals, remove, removeAll 등등...)을\n보여주고, LinkedList를 설명해준다. (음...? chap4가 LinkedList인데 여기서 나오네...?)</p>\n<h2 id=\"Chap-4-LinkedList-클래스\" style=\"position:relative;\">Chap. 4 LinkedList 클래스<a href=\"#Chap-4-LinkedList-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"Chap 4 LinkedList 클래스 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>chapter의 제목을 조금 바꿔야할 것 같네요... chap4에서는 ArrayList와 LinkedList(add 메서드의)의\n성능 비교를 합니다. 몇개를 add할 때, 얼마나 걸리는지를 구한 뒤,\n수식을 통해 어떤 결과가 나오는 지 확인할 수 있습니다.</p>\n<h2 id=\"Chap-5-이중-연결-리스트\" style=\"position:relative;\">Chap. 5 이중 연결 리스트<a href=\"#Chap-5-%EC%9D%B4%EC%A4%91-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8\" aria-label=\"Chap 5 이중 연결 리스트 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>LinkedList의 앞, 뒤에 Element가 추가될 때의 성능을 비교하고, 이중 연결 리스트에서\n같은 연산에서 어떤 자료구조가 효율적인지 확인해봅니다.</p>\n<h2 id=\"Chap-6-트리-순회-Chap-7-철학으로-가는-길\" style=\"position:relative;\">Chap. 6 트리 순회, Chap. 7 철학으로 가는 길<a href=\"#Chap-6-%ED%8A%B8%EB%A6%AC-%EC%88%9C%ED%9A%8C-Chap-7-%EC%B2%A0%ED%95%99%EC%9C%BC%EB%A1%9C-%EA%B0%80%EB%8A%94-%EA%B8%B8\" aria-label=\"Chap 6 트리 순회 Chap 7 철학으로 가는 길 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>검색 엔진 <code class=\"language-text\">(검색 엔진은 크롤링 / 인덱싱 / 검색으로 이루어짐)</code>을 주제로\n<code class=\"language-text\">[위키트리의 본문의 제일 첫 소문자 링크를 클릭하고 이어지는 기사에서도 이를 반복하다 보면 마지막 글은 철학에 도달하게 된다]</code>\n라는 추측을 테스트 해 봅니다. 깊이 우선 탐색을 Iterator로 반복하여 탐색하는 구조에 대해 설명하는데,\n짧게 설명하다보니 생략된 부분이 많아 내용을 모르고 보는 초보자들에게는 조금 어려울 수 있을 것 같네요.\n반복적인 트리 순회로 <code class=\"language-text\">크롤러</code>를 만드는 챕터입니다.</p>\n<h2 id=\"Chap-8-인덱서\" style=\"position:relative;\">Chap. 8 인덱서<a href=\"#Chap-8-%EC%9D%B8%EB%8D%B1%EC%84%9C\" aria-label=\"Chap 8 인덱서 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>인덱서란 검색어가 다수라면 이들의 집합을 분석하고, 검색어를 바탕으로 관련성 높은 페이지를 추리는 작업을 합니다.\n콜렉션, 맵이 이에 알맞는 자료구조지만 이 중 속도면에서는 맵이 더 빠르기에, 맵을 이용해 인덱서를 구성해봅니다.</p>\n<h2 id=\"Chap-9-Map-인터페이스\" style=\"position:relative;\">Chap. 9 Map 인터페이스<a href=\"#Chap-9-Map-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"Chap 9 Map 인터페이스 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>가장 많이 사용하는 자료구조 중 하나인 Map입니다. 반복적이고 단순한 구조인 LinearMap에 대해 설명되어 있습니다.</p>\n<h2 id=\"Chap-10-해싱-Chap-11-HashMap-클래스\" style=\"position:relative;\">Chap. 10 해싱, Chap. 11 HashMap 클래스<a href=\"#Chap-10-%ED%95%B4%EC%8B%B1-Chap-11-HashMap-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"Chap 10 해싱 Chap 11 HashMap 클래스 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>Map 인터페이스를 해시값으로 구현한 해싱입니다. 반복으로 키에 매핑되는 값을 구해내는 LinearMap과는 달리,\n해시된 키를 이용하여 값을 구하는 방법입니다.</p>\n<h2 id=\"Chap-12-TreeMap-클래스-Chap-13-이진-탐색-트리\" style=\"position:relative;\">Chap. 12 TreeMap 클래스, Chap. 13 이진 탐색 트리<a href=\"#Chap-12-TreeMap-%ED%81%B4%EB%9E%98%EC%8A%A4-Chap-13-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC\" aria-label=\"Chap 12 TreeMap 클래스 Chap 13 이진 탐색 트리 permalink\" class=\"autolink-headers-- after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>해시맵에서도 O(n)구조를 벗어날 수 없었기에, 조금 더 빠른 구조인 TreeMap이 나왔습니다. <code class=\"language-text\">(O(logn))</code>\n이 TreeMap에 사용된 이진 탐색 트리 구조가 어떤 것인지, 또 다른 트리구조엔 어떤것이 있는지 알아봅니다.</p>\n<hr>\n<ul>\n<li>추가적인 chapter가 있지만, 필수적이라기보단, 성능 향상과 추가 기능들을 알려줍니다.</li>\n</ul>\n<p>이번 리뷰 도서는 조금... 애매합니다. 주관적으로 생각하기에는 난이도가 고르지 못한 느낌이었고,\nchapter의 제목이 내용과 매치되지 않는 부분이 존재했습니다. 문장들이 이해하긴 쉬웠지만\n조금 다듬어야 될 것 같습니다.</p>\n<p>이번 리뷰는 여기서 마치겠습니다.</p>\n<p>감사합니다.</p>","frontmatter":{"title":"[Review] Think Data Structures","date":"July 24, 2018","tags":["review","java","data structures"]}}},"pageContext":{"slug":"/posts/review-think-data-structures","previous":{"fields":{"slug":"/posts/liff-app"},"frontmatter":{"title":"심심풀이 LIFF 앱개발"}},"next":{"fields":{"slug":"/posts/liff-app-2"},"frontmatter":{"title":"LIFF 활용기"}}}},"staticQueryHashes":["1576648375","764694655"]}